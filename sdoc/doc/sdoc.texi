\input texinfo @c -*-texinfo-*-

@comment %**start of header
@setfilename sdoc.info
@include version.texi
@settitle Using, running and building source code warehouse
@c @syncodeindex fn cp
@c @syncodeindex vr cp
@c @syncodeindex tp cp
@comment %**end of header

@alias package = command
@alias distro  = command
@alias ver     = command
@alias cradle  = file

@setchapternewpage odd
@ifinfo
Copyright @copyright{} 2009 Masatake YAMATO
Copyright @copyright{} 2009 Red hat, K.K.
@end ifinfo

@dircategory Understanding source code
@direntry
* source code warehouseの利用と運用: (sdoc)       source code warehouseの利用と運用
@end direntry

@titlepage
@title source code warehouseの利用と運用
@author Masatake YAMATO (@email{yamato@@redhat.com})
@page
@vskip 0pt plus 1filll
Copyright @copyright{} 2009 Masatake YAMATO
Copyright @copyright{} 2009 Red hat, K.K.
@c @insertcopying
@end titlepage

@ifnottex
@node Top
@top source code warehouseの利用と運用
@end ifnottex

source code warehouseとは、あなたや同僚が読む可能性のあるソースコードがある
べきところに配置されていて、ダウンロード待ちもインストール待ちも無く、
捜す手間を最小限に、ソフトウェアの動作について疑問に思ったその瞬間すぐ
にソースコードリーディングを開始できるような作業環境を指す筆者の造語で
す。

そんな環境を実現できるでしょうか？

筆者はオープンソースソフトウェア群から成るOS、ミドルウェアに対するサポー
ト、コンサルテーション、トレーニングをサービスとして提供する会社に勤務
する傍ら、4年を費して擬似的なsource code warehouseを構築し、同僚とともに利用
しています。

「擬似的に」というのは以下のような意味です:

@itemize @bullet
@item 読む可能性のある全てのソフトウェアを知ることはできないので、業務の
範囲で読む可能性がありかつ一般に入手可能なものを対象とした。

@item 疑問に思った瞬間にソースコードリーディングを開始することはできな
いが、命名規則を十分に工夫したディレクトリ構造中にソースコードを配置し、
それをNFSで共有することで、職場のネットワークを利用している限り十分短い
時間で開始できるようにした。
@end itemize

本文章ではまず、既に構築されたsource code warehouseの利用方法を説明します。
私の同僚であれば、source code warehouseの利用方法だけを知っていれば、それだ
けで便利なはずです。

次に、source code warehouseの設置、運用手順について説明します。設置、運用は
プログラム(@package{sbuild}, @package{sop})を用いてある程度自動化できて
います。それらのプログラムと自動化が十分でない部分の注意について説明し
ます。設置されたsource code warehouseが無ければ自分で設置するしかありません。
設置したsource code warehouseにソースコードを追加していき規模が増してくると、
さまざまなトラブルが発生します。それらに対する対処方法も説明します。

最後にsource code warehouseの拡張方法を説明します。設置、運用プログラムには、
設置、運用処理のいつくかの箇所に、登録しておいたユーザ独自プログラムを
実行するためのフック、プラグイン機構が用意されています。その機構を利用し
てsource code warehouseの様々な側面を拡張できます。

@menu
* 利用(共有ファイルシステム上)::
* 利用(ホームディレクトリ内)::
* 設置と保守::
* 拡張::
@end menu

@c =====================================================================
@node 利用(共有ファイルシステム上)
@chapter 利用(共有ファイルシステム上)
「擬似的な」source code warehouseでは、十分に工夫した一貫した命名規則による
ディレクトリ構造中にソースコードファイルの配置しています。そしてそのトッ
プディレクトリをNFSで共有しています。

職場では@code{sources}という名前のホストがNFSサーバを担当しています。そ
こでこの文章でもNFSサーバを@code{sources}という名前をホスト名に使うこと
にします。

早速マウントしてみましょう。
@example
# mkdir -p /srv/sources
# mount sources:/srv/sources /srv/sources
# cd /srv/sources
# ls
attic dists packages plugins sources
@end example

マウント先の名前@file{/srv/sources}は今のところ変更できません。複数の目
的でシンボリックリンクを取り回す必要があったため、その名前が
@package{sbuild}にハードコードされているためです。

@menu
* sources上のソースコード::
* トップレベルのディレクトリ構造::
* pvrのディレクトリ構造::
* pvr/pluginsのディレクトリ構造::
* attic/cradlesのディレクトリ構造::
@end menu

@node sources上のソースコード
@section sources上のソースコード
@code{sources}上にどういった種類のソースコードが配置されるか、というの
は設置時の設定によります。後に説明しますが、設置時の設定は
@file{/srv/sources/attic/cradles}以下に配置されます。ここでは筆者が職場
に設置したsourcesを例に説明します。

sources上には重複も含めて1.5Tバイトほどのソースコードがあります。次の表
に、ソースコードの取得先と取得対象種別、sourcesへの追加の方針を示します。

@multitable @columnfractions .4 .4 .2
@headitem 取得先 @tab 対象 @tab 追加方針

@item ftp.redhat.com                @tab *.src.rpm @tab non-gc
@item kojipkgs.fedoraproject.org    @tab *.src.rpm @tab gc
@item www.jpackage.org              @tab *.src.rpm @tab gc
@item rpmfusion-free-rawhide-source @tab *.src.rpm @tab gc
@item lcopy.sys                     @tab vcsによる @tab vcsによる

@end multitable

sources設置プログラム(@package{sbuild})の拡張機構を用いれば
@file{*src.rpm}以外の方法でまとめられたソースコードもsourcesに配置でき
るはずですが、もともとsourcesが筆者の業務に由来しているため、既に
sourcesに配置されているソースコードのほとんどが@file{*src.rpm}形式で入
手できるものばかりです。この@file{*src.rpm}を展開の後、有用そうな後処理
を加え、パッケージ間のディレクトリ名の衝突を避けて配置してあります。

運用ためのプログラム(@package{sop})は毎日取得先にある対象が更新されてい
ないか調べています。追加方針にgcとある場合、同名のパッケージに対するソー
スコードの新しいバージョンが取得先でみつかった場合、sources上にある古い
バージョンに対するソースコードを削除して、新しいものを配置します。
non-gcとある場合、古いバージョンを削除せずに、新しいバージョンを追加し
ます。

例えば @package{foo}というパッケージを考えます。sourcesには
@file{foo-1.1.src.rpm}のソースコードが既に配置済みだとします。ここで
fooの取得先にて@file{foo-1.2.src.rpm}の存在が検出されたとします。gcの場
合@file{foo-1.1.src.rpm}の内容を配置した @file{foo/1.1}を削除の後
@file{foo/1.2}を用意して、そこに@file{foo-1.2.src.rpm}の内容を配置しま
す。一方non-gcの場合@file{foo/1.1}をそのままにして、@file{foo/1.2}を用
意して、そこに@file{foo-1.2.src.rpm}の内容を配置します。

@cradle{ftp.redhat.com}は、最も業務で頻繁に用いるはずです。最近アップデー
トされたパッケージよりは、(顧客の使う)古いバージョンに関する調査が頻発
するので追加方針をnon-gcとしています。

@cradle{kojipkgs.fedoraproject.org}, @cradle{www.jpackage.org},
@cradle{rpmfusion-free-rawhide-source}は、必ずしも業務に必要ないかもし
れませんが、最近のオープンソース世界の動向や、将来の製品候補のコードレ
ベルで調査するのに役立つはずです。

@cradle{lcopy.sys}は変り種です。唯一対象を@file{*src.rpm}としません。
@cradle{lcopy.sys}はソースコードの入手に@command{git}, @command{svn},
@command{cvs}といったバージョン管理システムを使います。入手先となるリポ
ジトリはsources構築時に指定します。最初にチェックアウトして、以降毎日アッ
プデートします。現状では、linuxカーネルの開発元であるgit.kernel.orgなど
がリポジトリとして指定されています。特定のソフトウェアの最新動向を追跡
することができます。

入手先がどこであれ、十分に工夫した一貫した命名規則によるディレクトリ構
造中にソースコードファイルを配置しているため、どのソフトウェア(あるいは
パッケージ)のソースコードであれ、それを@file{/srv/sources}からみつける
のは容易です。以降その命名規則を説明します。

@node トップレベルのディレクトリ構造
@section トップレベルのディレクトリ構造
トップレベルである@file{/srv/sources}には
@file{sources}, @file{packages}, @file{dists}, @file{plugins}, @file{attic}
の5つのディレクトリがあります。

@menu
* sources ディレクトリ::
* dists ディレクトリ::
* packages ディレクトリ::
* plugins ディレクトリ::
* attic ディレクトリ::
@end menu

@node sources ディレクトリ
@subsection sources ディレクトリ
ソースコードを参照したいパッケージの名前とバージョン名について正確に知っ
ている場合、@file{/srv/sources/sources}を使います。

あるパッケージの名前を@emph{package}、バージョンを@emph{version}、パッ
ケージの名前の最初の文字を@emph{p}としたとき、そのソースコードは以下の
場所に配置されます。

@cartouche
@example
/srv/sources/sources/@emph{p}/@emph{package}/@emph{version}
@end example
@end cartouche

このディレクトリを特にパッケージに対する@dfn{pvrディレクトリ}を呼びます。
src.rpmに由来するソースコードを@package{sbuild}で配置した場合、
@emph{version}の部分は、そのsrc.rpmのバージョン名(version)とリリース名
(release)をハイフンでつないだものになります。pvrの名はpackage,
version, releaseの頭文字に由来します。

例えば@package{kernel-2.6.31-12.fc12}の配置場所は
@cartouche
@example 
/srv/sources/sources/k/kernel/2.6.31-12.fc12/
@end example
@end cartouche
となります。

パッケージの名前の最初の文字を用いるのはsourcesに配置するパッケージの数
が増えたときに、/srv/sources/sources以下のディレクトリが増えすぎて、一
覧の取得が遅くなるのを避けるためです。

@node dists ディレクトリ
@subsection dists ディレクトリ
ソースコードを調べたいパッケージについて、パッケージの名前とそれがどの
ディストリビューションに含まれるかがわかっている場合、
@file{/srv/sources/dists}を使います。

あるパッケージの名前を@emph{package}、ディストリビューションの名称を
@emph{distro}、パッケージの名前の最初の文字を@emph{p}としたとき、そのソー
スコードは以下の場所に配置されます。

@cartouche
@example
/srv/sources/dists/@emph{distro}/packages/@emph{p}/@emph{package}
@end example
@end cartouche

例えば@distro{rhel5su4}の@package{kernel}の配置場所は
@cartouche
@example 
/srv/sources/dists/rhel5su4/packages/k/kernel -> /srv/sources/sources/k/kernel/2.6.18-164.el5
@end example
@end cartouche
となります。

-> は@file{/srv/sources/dists/rhel5su4/packages/k/kernel}がシンボリックリンクであり、
@file{/srv/sources/sources/k/kernel/2.6.18-164.el5}を指していることを意味します。

@command{ls -l}として、シンボリックリンクの先を表示することで、パッケー
ジの名前から、あるディストリビューションにおけるそのパッケージのバージョ
ン名を知ることができます。上の例であれば、@command{ls -l
/srv/sources/dists/rhel5su4/packages/k/kernel}とすることで、
@distro{rhel5su4}の@package{kernel}のバージョンが@ver{2.6.18-164.el5}で
あることがわかります。

@file{/srv/sources/dists/@emph{distro}}にはさらに@file{dist-mapping.es}ファイルと
@file{plugins}ディレクトリがあります。

@file{dist-mapping.es}には、ディストリビューションとそれに属するパッケー
ジの一覧がes expressionで格納されています(@pxref{es expression, es
expression, es expression, es-lang-c-stdc99, es-lang-c-stdc99})。従って
schemeインタプリタやes-lang-c-stdc99で読み出すことができます。実際、上
で説明したシンボリックリンクの生成するために、Gauche schemeインタプリタ
を使っています。@file{dist-mapping.es}中のes expressionは次のような形式
を持ちます。
@lisp
(srpmix-wrap name 
             :target-srpm  "@var{src.rpmの名前}"
             :package      "@var{パッケージの名前}"
             :version      "@var{パッケージ}"
             :release      "@var{リリース}"
             :wrapped-name "@var{srpmixコマンドでソースコードを梱包してできたパッケージの名前}")
@end lisp

@file{plugins}ディレクトリは、ディストリビューション毎に付加的な情報を
追加配置できるよう用意してあります。外部コマンド
@command{srpmix-weakview-dist-attach}で追加配置できます。現状では使われていま
せんが、将来ディストリビューション毎の全文検索のためのインデックスファ
イルなどを置く予定です(@ref{拡張})。

@node packages ディレクトリ
@subsection packages ディレクトリ

@node plugins ディレクトリ
@subsection plugins ディレクトリ
ソースコード以外のsources全体に対する付加的な情報を追加配置できるよう用
意してあります。外部コマンド@command{srpmix-rootdir-attach}で追加配置で
きます。現状では使われていません(@ref{拡張})。

@node attic ディレクトリ
@subsection attic ディレクトリ


@node pvrのディレクトリ構造
@section pvrのディレクトリ構造

specs.spec
pre-build
archives
vanilla
plugins

@node pvr/pluginsのディレクトリ構造
@section pvr/pluginsのディレクトリ構造

@node attic/cradlesのディレクトリ構造
@section attic/cradlesのディレクトリ構造

@node 利用(ホームディレクトリ内)
@chapter 利用(ホームディレクトリ内)

@node 設置と保守
@chapter 設置と保守
srpmix, sop, sbuild, lcopy

@node 拡張
@chapter 拡張
srpmix: spec rewrite rules, package-plugins, dist-plugin, top-plugin
sbuild: builder
sop: mirror-engine
lcopy: backend

@contents
@bye

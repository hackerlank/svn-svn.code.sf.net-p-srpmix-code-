#!/bin/bash
#
# dwatch preview
# dwatch checkout
# dwatch update 
# dwatch info
#
MY_TMPDIR=
DWATCH_DEBUG=
DWATCH_CACHE_DIR=~/.dwatch
mkdir -p "${DWATCH_CACHE_DIR}"


function print_usage
{
    echo "Usage: "
    echo "	dwatch --help|-h"
    echo "	dwatch help"
    echo "	dwatch [--debug] devscripts"
    echo "	dwatch [--debug] preview DPKG-NAME"
    echo "	dwatch [--debug] checkout DPKG-NAME"
    echo "	dwatch [--debug] update"
    echo "	dwatch [--debug] info"
}


function dwatch_help
{
    print_usage
    exit 0
}

function dwatch_devscripts
{
    if [ -d ${DWATCH_CACHE_DIR}/devscripts ]; then
	exit 0
    else
	(
	    cd ${DWATCH_CACHE_DIR}
	    git clone git://git.debian.org/devscripts/devscripts.git
	    exit $?
	)
    fi
}

function dwatch_preview
{
    local dpkg

    if ! [ $# -eq 1 ]; then
	{
	    echo "Wrong number of argument(s) for sub command: " preview
	    print_usage
	    exit 1
	} 1>&2
    fi
    
    dpkg=$1
    shift
    
    
    local diff_gz_url="$MY_TMPDIR/diff_gz.url"
    diff_gz_url=$(dwatch-url $dpkg)
    local dwatch_url_status=$?
    if [ "${dwatch_url_status}" != 0 ]; then
	exit "${dwatch_url_status}"
    fi

    local diff_gz="$MY_TMPDIR/$dpkg.diff.gz"
    local wget_opts
    if [ -z "$DWATCH_DEBUG" ]; then
	wget_opts=-q
    fi

    if ! wget ${wget_opts} ${diff_gz_url} -O "${diff_gz}"; then
	exit 2
    fi

    local watch="$MY_TMPDIR/$dpkg.watch"
    if ! ( gunzip -c ${diff_gz} | filterdiff -z -i '*/debian/watch' | patch  -o - -s > "$watch" ) ; then
	exit 2
    fi

    if [ $(stat -c "%s" $watch) = 0 ]; then
	exit 2
    fi

    cat $watch
    exit 0
}

function dwatch__get 
{
    local dpkg
    local watch

    dpkg=$1
    ver=$2
    watch=$3

    perl -I ${DWATCH_CACHE_DIR}/devscripts ${DWATCH_CACHE_DIR}/devscripts/scripts/uscan.pl \
	--package $dpkg \
	--upstream-version $ver \
	--watchfile $watch \
	--download \
        --dehs \
        --destdir $MY_TMPDIR \
	--repack \
	--symlink > $MY_TMPDIR/${dpkg}.dehs    
    
    return $?
}

function extract_uversion
{
    local dehs=$1
    sed -n -e 's|<upstream-version>\(.*\)</upstream-version>|\1|p' $dehs
}

function write_dot_dwatch
{
    local dpkg=$1
    local ver=$2

    echo '# -*- shell-script -*-'
    echo "DWATCH_PACKAGE=$dpkg"  
    echo "DWATCH_UPSTREAM_VERSION=$ver"
}

function updated_p
{
    local dehs=$1

    fgrep -e '<status>Newer version available</status>' $dehs > /dev/null 2>&1
    return $?
}

function dwatch_checkout
{
    local dpkg

    if ! [ $# -eq 1 ]; then
	{
	    echo "Wrong number of argument(s) for sub command: " checkout
	    print_usage
	    exit 1
	} 1>&2
    fi
    
    dpkg=$1
    shift
    ver=${2:-0.0.0}

    local watch="$MY_TMPDIR/$dpkg.watch"
    if ! dwatch preview $dpkg > $watch; then
	exit 2
    fi

    if ! dwatch devscripts; then
	exit $?
    fi

    
    dwatch__get $dpkg $ver $watch
    local status=$?
    local dehs=$MY_TMPDIR/${dpkg}.dehs
    if [ ! $status = 0 ]; then
	if [ -r $dehs ]; then
	    cat $dehs 1>&2
	fi
	exit $status
    fi

    if ! updated_p "$dehs"; then
	exit 3
    fi

    local nver=$(extract_uversion $dehs)
    mkdir -p $dpkg
    write_dot_dwatch $dpkg $nver > $dpkg/.dwatch

    (
	cd $dpkg;
	tar zxvf $MY_TMPDIR/${dpkg}_${nver}.orig.tar.gz
     )

    exit 0
}

function member_p
{
    local elt=$1
    shift

    local found
    for x in "$@"; do
	if [ $x = $elt ]; then
	    found=yes
	fi
    done

    if [ -n "$found" ]; then
	return 0
    else
	return 1
    fi
}

# 0: updated
# 1: error
# 2: cannot find
# 3: not updated
function dwatch_update
{
    if ! [ -r .dwatch ]; then
	echo "Not at dwatch directory" 1>&2
	exit 1
    fi

    if ! source .dwatch; then
	echo "Cannot read .dwatch file" 1>&2
	exit 1
    fi

    if [ -z "$DWATCH_PACKAGE" ]; then
	echo "No definision for DWATCH_PACKAGE" 1>&2
    fi

    if [ -z "$DWATCH_UPSTREAM_VERSION" ]; then
	echo "No definision for DWATCH_UPSTREAM_VERSION" 1>&2
    fi

    
    local dpkg=$DWATCH_PACKAGE
    local ver=$DWATCH_UPSTREAM_VERSION
    local watch="$MY_TMPDIR/$dpkg.watch"
    if ! dwatch preview $dpkg > $watch; then
	exit 2
    fi

    if ! dwatch devscripts; then
	exit $?
    fi
        
    dwatch__get $dpkg $ver $watch
    local status=$?
    local dehs=$MY_TMPDIR/${dpkg}.dehs
    if [ ! $status = 0 ]; then
	if [ -r $dehs ]; then
	    cat $dehs 1>&2
	fi
	exit $status
    fi

    if ! updated_p "$dehs"; then
	exit 3
    fi

    local nver=$(extract_uversion $dehs)
    write_dot_dwatch $dpkg $nver > ./._dwatch

    local old_ls=$(ls)
    tar zxvf $MY_TMPDIR/${dpkg}_${nver}.orig.tar.gz
    mv ./._dwatch ./.dwatch
    local new_ls=$(ls)

    for n in $new_ls; do
	if member_p $n $old_ls  && \
 	   ( !  [ $n = "." ] )  && \
	   ( !  [ $n = ".." ] ) && \
	   ( !  [ $n = ".dwatch" ] ); then
	    rm -rf ./$n
	fi
    done
    exit 0
}


function dwatch_info
{
    if ! [ -r .dwatch ]; then
	echo "Not at dwatch directory" 1>&2
	exit 1
    fi

    if ! source .dwatch; then
	echo "Cannot read .dwatch file" 1>&2
	exit 1
    fi

    if [ -z "$DWATCH_PACKAGE" ]; then
	echo "No definision for DWATCH_PACKAGE" 1>&2
    fi

    if [ -z "$DWATCH_UPSTREAM_VERSION" ]; then
	echo "No definision for DWATCH_UPSTREAM_VERSION" 1>&2
    fi

    
    local dpkg=$DWATCH_PACKAGE
    local ver=$DWATCH_UPSTREAM_VERSION
    
    echo "PACKAGE: $dpkg"
    echo "VERSION: $ver"

    exit 0
}

function main
{
    local cmd=
    while [ $# -gt 0 ]; do
	case "$1" in
	    -h|--help)
		print_usage
		exit 0
		;;
	    --debug)
		DWATCH_DEBUG=yes
		;;
	    *)
		break
		;;
	esac
	shift
    done

    if [ $# -lt 1 ]; then
	{
	    echo "No sub command given"
	    print_usage
	    exit 1
	} 1>&2
    fi

    cmd=$1
    shift

    if ! type dwatch_$cmd > /dev/null 2>&1; then
	{
	    echo "No such sub command: " $cmd
	    print_usage
	    exit 1
	} 1>&2
    else
	MY_TMPDIR=`mktemp -d`
	if [ -z "$DWATCH_DEBUG" ]; then
	    trap "chmod -R u+w $MY_TMPDIR; /bin/rm -rf $MY_TMPDIR" 0
	else
	    echo "TMPDIR: $MY_TMPDIR" 1>&2
	fi
	dwatch_$cmd "$@"
    fi
}

main "$@"

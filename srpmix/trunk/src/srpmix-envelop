#!/bin/sh
#
########################################################################
#
# srpmix-envelop: Envelop swrf package
#
# Copyright (C) 2008 Masatake YAMATO
#
# Author: Masatake YAMATO <yamato@redhat.com>
#
# program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
########################################################################

RPMBUILD=rpmbuild
LIBSRPMIX=libsrpmix.sh
OUTPUTDIR=
TMPDIR=
DUMP_SPEC=
ALLOW_OVERWRITE=

function print_usage
{
	echo "Usage: "
	echo "  srpmix-envelop [--help|-h]"
	echo "  srpmix-envelop [--dump-spec] SWRF..."
	echo "  srpmix-envelop [--output-dir=OUTPUTDIR] [--release=RELEASE] [--allow-overwrite] [SWRF...]"
	echo ""
	echo "  If SWRF is not given, standard input is"
	echo "  used for the list of source pacakges."
	echo
}

function cleanup
{
    if test -d "$TMPDIR"; then
	rm -rf $TMPDIR || true
    fi
}

function parse_arguments
{
    while [ $# -gt 0 ]; do
	case "$1" in
	    --help|-h)
		print_usage
		exit 0
		;;
	    --output-dir=*)
	        OUTPUTDIR=$(echo $1 | sed 's/--output-dir=//')
		;;
            --release=*)
	        SRPMIX_RELEASE=$(echo $1 | sed 's/--release=//')
		;;
	    --dump-spec)
	        DUMP_SPEC=1
		;;
	    --allow-overwrite)
	        ALLOW_OVERWRITE=1
		;;
	    *)
		break
		;;
	esac
	shift
    done

    if test "x$1" = "x"; then
        while read tmp; do
	  swrfs="${swrfs} ${tmp}"
	done
    else
	swrfs=$@	
    fi

    if test "x$OUTPUTDIR" = "x"; then
	OUTPUTDIR=.
    fi
    if test ! -d "${OUTPUTDIR}"; then
	srpmix_abort "No such directory: ${OUTPUTDIR}"
    fi
}


function try_source
{
    source $1
    if test $? != 0; then
        echo "*** ABORT..." "cannot find $1" 1>&2
	exit 1
    fi
}


function envelop_srpm
{
    target_swrf=$1
    spec=
    enveloped_name=
    es_name=


    pvrd=$(rpm -qp --nosignature --queryformat "%{NAME} %{VERSION} %{RELEASE} %{Description}" $target_swrf)
    package=$(echo $pvrd | cut -d' ' -f1)
    description="$(echo $pvrd | cut -d' ' -f4-)"
    if test "x$package" = "x"; then
        echo "warning: failed to parse $target_swrf: ignored" 1>&2
        return
    fi
    
    enveloped_name=$(srpmix_build_enveloped_name "$package")
    es_name=$(es_print srpmix-envelop name\
	--target-swrf="\"$(basename $target_swrf)\"" \
	--enveloped-name="\"${enveloped_name}\"")

    if test -f ${OUTPUTDIR}/${enveloped_name}-$SRPMIX_VERSION-$SRPMIX_RELEASE.src.rpm; then
	if test -z "$ALLOW_OVERWRITE"; then
            echo \;\; ${OUTPUTDIR}/${enveloped_name}-$SRPMIX_VERSION-$SRPMIX_RELEASE.src.rpm already exists 1>&2
	    echo "$es_name"
            return
	fi
    fi
    
    license=$(rpm -qp --nosignature --queryformat "%{License}" $target_swrf)

    if test "x${DUMP_SPEC}" = "x"; then
	spec="$TMPDIR/SPECS/${enveloped_name}.spec"
    else
	spec="/dev/stdout"
	if test ! -w "${spec}"; then
	    # ???
	    spec="/dev/tty"
	fi
    fi
    
    cat > "$spec" <<EOF
Summary: rpm package envelops $package
Name: ${enveloped_name}
Version: $SRPMIX_VERSION
Release: $SRPMIX_RELEASE
Source: `basename $target_swrf`
Autoreq: 0
Requires: srpmix
BuildRequires: rsync
Buildarch: noarch

Buildroot: %{_tmppath}/%{name}-root
Group: Development/Tools
License: $license

%define __os_install_post true

%description
$description

%prep

%build

%install
rm -rf \$RPM_BUILD_ROOT

from=\$RPM_SOURCE_DIR/`basename $target_swrf`
to=\$RPM_BUILD_ROOT${SRPMIX_SWRFS_DIR}
mkdir -p \$to

if test \$(stat --format="%D" \$from) = \$(stat --format="%D" \$to); then
   transfer_cmd="cp -a -l"
else
   transfer_cmd="rsync -a"
fi
\$transfer_cmd \$from \$to


%clean
rm -rf \$RPM_BUILD_ROOT

%post
srpmix-db --install ${SRPMIX_SWRFS_DIR}/`basename $target_swrf`

%postun
srpmix-db --erase ${enveloped_name}

%files
%defattr(-,root,root)
${SRPMIX_SWRFS_DIR}/*

%changelog
* Sat Jun  2 2007 SRPMIX ENVELOP <consulting-jp@redhat.com> $package
- Automatically generated.

EOF

    if test "x${DUMP_SPEC}" != "x"; then
	printf "# "
	echo "$es_name"
	return
    fi

    cp $target_swrf $TMPDIR/SOURCES/
    $RPMBUILD --quiet --define "_topdir $TMPDIR" -bs "$spec" > /dev/null
    mv $TMPDIR/SRPMS/${enveloped_name}-$SRPMIX_VERSION-$SRPMIX_RELEASE.src.rpm "${OUTPUTDIR}"
    rm $TMPDIR/SOURCES/`basename $target_swrf`
    echo "$es_name"

    es_print srpmix-envelop done \
	--file="\"$(ls ${OUTPUTDIR}/${enveloped_name}-$SRPMIX_VERSION-$SRPMIX_RELEASE.src.rpm)\""
}

function main
{
    srpmix_verify_commands "${RPMBUILD}"
    parse_arguments "$@"

    if test "x${DUMP_SPEC}" = "x"; then
	TMPDIR=`mktemp -d`
	trap cleanup 0
	install -d $TMPDIR/{SPECS,BUILD,SOURCES,SRPMS}
    fi

    for swrf in $swrfs
    do
        if test -f "$swrf"; then
	    envelop_srpm "$swrf"
        else
            srpmix_abort "No such file: $swrf"
        fi
    done
}

try_source ${LIBSRPMIX}

RUN=
if test "x${DUMP_SPEC}" = "x"; then
    RUN=es_time
fi
${RUN} main "$@"

exit $?

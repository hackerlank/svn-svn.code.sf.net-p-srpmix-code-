#!/bin/sh
#|-*- scheme -*-|#
:; exec gosh -- $0 "$@"
(define (help status)
  (let1 port (if (eq? status 0) 
		 (current-output-port)
		 (current-error-port))
    (display "Usage: \n")
    (display "	build-opt-rules PKG-FILE\n" port)
    (display "	build-opt-rules --help|-h\n" port)
    (display "  Rules are read from stdin\n" port)
    (exit status)))

(define-method object-apply ((str0 <string>) (str1 <string>))
  (equal? str0 str1))

(define header "--rearrange-spec-command={ sed ")
(define footer "; }")
(define bootstrap  "-e \'s#^\./bootstrap#echo hacked-by-srpmix #\' ")
(define %configure "-e \'s#^%configure#echo hacked-by-srpmix #\' ")
(define configure  "-e \'s#^\./configure#echo hacked-by-srpmix #\' ")
(define autotools "-e \'s#^\\./autogen.sh.*\\|^\\./bootstrap.sh.*\\|^autoheader.*\\|^aclocal.*\\|^libtoolize.*\\|^autoconf.*\\|^automake.*#echo hacked-by-srpmix #\' ")

(define (handle-alias x)
  (case x
    ('dont-run-autotools-and-configure-and-bootstrap
     (string-append
      header
      bootstrap
      autotools
      %configure
      configure
      footer))
    ('dont-run-autotools-and-configure
     (string-append
      header
      autotools
      %configure
      configure
      footer))
    ('dont-run-autotools
     (string-append
      header
      autotools
      footer))
    ('dont-run-configure
     (string-append
      header
      %configure
      configure
      footer))
    (else
     x)))

(define (main args)
  (let1 args (cdr args)
    (cond
     ((null? args) (help 2))
     ((or (equal? (car args) "-h") (equal? (car args) "--help"))
      (help 0))
     (else
      (let1 result (let/cc return
		     (let1 pkg (car args)
		       (for-each
			(lambda (rule)
			  (when ((car rule) pkg)
			    (return (cdr rule))))
			(reverse 
			 (let loop ((rules (list))
				    (r (read)))
			   (if (eof-object? r)
			       rules
			       (loop (cons r rules) (read)))))))
		     (return (list)))
	(for-each (lambda (x) 
		    (display (handle-alias x))
		    (newline)) 
		  result)
	(exit 0))))))

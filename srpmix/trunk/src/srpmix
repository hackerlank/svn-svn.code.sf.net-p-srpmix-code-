#!/bin/sh

TARGET_NAME=
TARGET_SRPM=

LIBSRPMIX=libsrpmix.sh
function try_source
{
    source $1
    if test $? != 0; then
        echo "*** ABORT..." "cannot find $1" 1>&2
	exit 1
    fi
}
try_source ${LIBSRPMIX}



MY_TMPDIR=
WRAP_OPTS=""
RELEASE=
OUTPUT_DIR=
DEBUG=""

set -e


function print_usage
{
    echo "Usage: "
    echo "  srpmix [--hardlink]"
    echo "         [--output-dir=DIR]"
    echo "         [--release=RELEASE]"
    echo "         [--debug]"
    echo "         [--ignore-error]"
    echo "         [--target=ARCH]"
    echo "         [--multi-targets]"
    echo "         [--keep-original]"
    echo "          --name=PACKAGE|--srpm=SRPM"
    echo
    echo "ARCH: i386(not for kenel), i686, x86_64, ia64, or ppc64"
#    TODO: Multi targets
#    TODO: URL support
#    echo ""
#    echo "As SRPM a url like http://... is acceptable."
#
#    TODO: --git
#          --hg
#          --tgz
#          --dir
#  
}

function parse_arguments
{
    while [ $# -gt 0 ]; do
	case "$1" in
            --help|-h)
		print_usage
		exit 0
		;;
	    --name=*)
                TARGET_NAME="$(echo $1 | sed 's/--name=//')"
                ;;
	    --srpm=*)
	        TARGET_SRPM="$(echo $1 | sed 's/--srpm=//')"
		;;
	    --release=*)
		RELEASE="$(echo $1 | sed 's/--release=//')"
		SRPMIX_PKG_RELEASE=$RELEASE
	        WRAP_OPTS="$WRAP_OPTS --release=$RELEASE"
		ENVELOP_OPTS="$ENVELOP_OPTS --release=$RELEASE"
	        ;;
	    --hardlink)
	        export SRPMIX_DO_HARDLINK=yes
	        ;;
	    --ignore-error)
	        export SRPMIX_IGNORE_ERROR=yes
		;;
	    --multi-targets)
	        export SRPMIX_MULTI_TARGETS=yes
		;;
            --keep-original)
	        export SRPMIX_KEEP_ORIGINAL=yes
		;;
	    --output-dir=*)
	        OUTPUT_DIR="$(echo $1 | sed 's/--output-dir=//')"
		if test -d "${OUTPUT_DIR}"; then
		    OUTPUT_DIR=$(cd $OUTPUT_DIR; pwd)
		else
		    srpmix_abort "No such directory: ${OUTPUT_DIR}"
		fi
		;;
	    --target=*)
	        export SRPMIX_TARGET=$(echo $1 | sed 's/--target=//')
		;;
	    --debug)
	        DEBUG=yes
		set -x
		;;
	    --*)
	        print_usage 1>&2
		srpmix_abort "Unknow option: $1"
		;;
	    *)
	       break
	       ;;
	 esac
	 shift
    done
    
    if test "x$1" != "x"; then
	print_usage 1>&2
	srpmix_abort "too many arguments"
    fi

    if test -z "${OUTPUT_DIR}"; then
	if test "`whoami`" != "root"; then
	    srpmix_abort "You must be root to run this program"
	fi
    fi

    if test -z "${TARGET_NAME}" -a -z "${TARGET_SRPM}"; then
	print_usage 1>&2
	srpmix_abort "Specify either --name or --srpm"
    fi

    if test -n "${TARGET_NAME}" -a -n "${TARGET_SRPM}"; then
	print_usage 1>&2
	srpmix_abort "Specify either --name or --srpm"
    fi

    if test -n "${TARGET_SRPM}"; then
	if test ! -f "${TARGET_SRPM}"; then
	    case "${TARGET_SRPM}" in
		http://*|ftp://*)
		    wget -O ${MY_TMPDIR}/$(basename ${TARGET_SRPM}) ${TARGET_SRPM}
		    if test $? = 0; then
			TARGET_SRPM="${MY_TMPDIR}/$(basename ${TARGET_SRPM})"
		    else
			srpmix_abort "Failed in download ${TARGET_SRPM}" 
		    fi
		    ;;
		*)
		    srpmix_abort "No way to retrieve ${TARGET_SRPM}"
		    ;;
	    esac
	else
	    if srpmix_can_ln "${TARGET_SRPM}" ${MY_TMPDIR}; then
		ln ${TARGET_SRPM} ${MY_TMPDIR}/$(basename ${TARGET_SRPM})
	    else
		cp ${TARGET_SRPM} ${MY_TMPDIR}/$(basename ${TARGET_SRPM})
	    fi
	    TARGET_SRPM=${MY_TMPDIR}/$(basename ${TARGET_SRPM})
	fi
    fi
}

function check_pvr_rpm
{
    pvr=$1
    count=

#	if is_memeber "${pvr}" $all; then
#	    echo "*** Source code for ${pvr} is already installed ***" 1>&2
#	    exit 0
#	fi

    count=`rpm -qa "^${pvr}-srpmix-"'*' | wc -l`
    if test $count != 0; then
	echo "*** Source code for ${pvr} is already installed ***" 1>&2
	exit 0
    fi    
}

function check_pvr_output_dir
{
    pvr=$1
    p0=
    p=

    p0=$(srpmix_srchash $pvr)
    p=$(echo "${OUTPUT_DIR}/$p0/${pvr}-srpmix-"[0-9]* | head -1)
    if test -f "$p"; then
	echo "*** Source code for ${pvr} exists at ${OUTPUT_DIR}/$p0 ***" 1>&2
	exit 0
    fi
}

function envelope_swrf_by_rpm
{
    for swrf in $@; do
	p=$(rpm -qp --nosignature --queryformat "%{NAME}" $swrf | cut -d' ' -f1)
	enveloped_name=$(srpmix_build_enveloped_name "$p")

	# TODO: Return status
	srpmix-envelop $ENVELOP_OPTS $swrf
	p=$(ls ${enveloped_name}-$SRPMIX_PKG_VERSION-$SRPMIX_PKG_RELEASE*.src.rpm | grep -v '\.swrf\.')
	rpmbuild --define "_rpmdir $MY_TMPDIR/RPMS"     \
	         --define "_srcrpmdir $MY_TMPDIR/SRPMS" \
	         --define "_builddir $MY_TMPDIR/BUILD"  \
		 --define "_buildrootdir $MY_TMPDIR/BUILDROOT" \
                 --define "_specdir $MY_TMPDIR/SPECS"   \
	         --define "_sourcedir $MY_TMPDIR/SOURCES" \
	         --rebuild -ba $p \
	    || exit 4
    done
}

function envelope_swrf
{
    envelope_swrf_by_rpm $@
}

function main
{
#   all=`srpmix-db --list | grep -e '-srpmix$' | sed -e 's/-srpmix$//'`

    MY_TMPDIR=`mktemp -d`
    trap "chmod -R u+w $MY_TMPDIR; /bin/rm -rf $MY_TMPDIR" 0    

    
    parse_arguments "$@"
    if test -n "$DEBUG"; then
	trap 0
	echo "*** Using $MY_TMPDIR as temporary directory"
    fi

    cd $MY_TMPDIR
    mkdir -p RPMS SRPMS BUILD BUILDROOT SPECS SOURCES
    
    
    if test -n "${TARGET_NAME}"; then
	yumdownloader --source "${TARGET_NAME}"
	TARGET_SRPM=$(/bin/ls *.src.rpm)
    fi

    # create_swrf <workdir> <wrap_opts> [<target srpms>...]
    create_swrf "$MY_TMPDIR" "$WRAP_OPTS" $TARGET_SRPM

    if test ! -d RPMS/noarch; then
	exit 3
    fi

    envelope_swrf `find RPMS/noarch -name '*swrf.noarch.rpm'`

    find RPMS/noarch -name '*noarch.rpm' | grep -v '\.swrf\.' \
    | if test -n "${OUTPUT_DIR}"; then
	while read p; do
	    p0=$(basename $p)
	    p00=`srpmix_srchash $p0`
	    mkdir -p "${OUTPUT_DIR}/${p00}"
	    mv $p "${OUTPUT_DIR}/${p00}/"
	done
    else
	xargs yum localinstall -y --nogpgcheck
    fi

    status=$?

    # Notify again
    if test -n "$DEBUG"; then
	echo "*** Using $MY_TMPDIR as temporary directory"
    fi
    
    return $status
}

{ main "$@" ; } < /dev/null
exit $?

########################################################################
#
# libsrpmix.sh: support shell functions for srpmix
#
# Copyright (C) 2007 Masatake YAMATO
#
# Author: Masatake YAMATO <yamato@redhat.com>
#
# program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
########################################################################

#variable
SRPMIX_ROOT_DIR=/usr/share/srpmix
SRPMIX_SOURCES_DIR="${SRPMIX_ROOT_DIR}/sources"

SRPMIX_VERSION=@VERSION@
SRPMIX_MAJOR_VERSION=@SRPMIX_MAJOR_VERSION@
SRPMIX_MINOR_VERSION=@SRPMIX_MINOR_VERSION@
SRPMIX_MICRO_VERSION=@SRPMIX_MICRO_VERSION@
SRPMIX_RELEASE=0

function srpmix_abort
{
    echo "*** ABORT..." "$@" 1>&2
    exit 1
}

function srpmix_verify_commands
{
    while [ $# -gt 0 ]; do
	if which $1 > /dev/null 2>&1; then
	    :
	else
	    echo "cannot find $1" 1>&2
	    srpmix_abort
	fi
	shift 
    done
}

function srpmix_build_wrapped_name
{
    local package=$1
    local version=$2
    local release=$3

    wrapped_name="$package-$version-$release-srpmix"
    echo ${wrapped_name}
}

# srpmix_srcdir package version release
# srpmix_srcdir prints the source directory for (package, version, release)
function srpmix_srcdir
{
    local package=$1
    local version=$2
    local release=$3

    local pkg_hash=${package:0:1}
    local pkg_root="${SRPMIX_SOURCES_DIR}"/"${pkg_hash}"/"$package"
    
    echo "${pkg_root}"/"$version-$release"
}

srpmix_distmap_to_pvr_script='
(letrec ((kget (lambda (kl ky)
	      (cond ((null? kl) #f)
		    ((eq? (car kl) ky) (cadr kl))
		    (else (kget (cdr kl) ky))))
	    ))
  (let loop ((r (read)))
       (unless (eof-object? r)
	 (when (and (list? r)
		    (eq? (car r) `srpmix-wrap)
		    (not (null? (cdr r)))
		    (eq? (cadr r) `name))
	   (format #t "~a ~a ~a\n" 
		   (kget r :package)
		   (kget r :version)
		   (kget r :release)))
	 (loop (read)))))'

GOSH=gosh
# Print :package, :version, and :release field of dist-mapping es espression.
# Example Input:
# (srpmix-wrap name :target-srpm "ElectricFence-2.2.2-20.2.src.rpm" 
#                   :package "ElectricFence" 
#                   :version "2.2.2" 
#                   :release "20.2" 
#                   :wrapped-name "ElectricFence-2.2.2-20.2-srpmix")
# Expected Output:
# ElectricFence 2.2.2 20.2
#
function srpmix_distmap_to_pvr
{
    ${GOSH} -e "${srpmix_distmap_to_pvr_script}"
}

########################################################################
#
function es_echo_n
{
    printf "%s" "$*"
}
#
########################################################################

########################################################################
#
# es_time
#
function es_time
{
    TIMEFORMAT=$'(es-time :real %R :user %U :sys %S)' 
    time "$@"
    return $?
}
#
########################################################################


########################################################################
#
# es_print is taken from es-lang-sh-print. 
#
function es_print
{
    es_print_sans_newline "$@"
    printf "\n"
}

function es_print_tail_p
{
    if [ "x$1" = "x" ]; then
	return 0
    fi

    case "$1" in
	-s=*)
            return 1
	    ;;
	-S=*)
            return 1
	    ;;
	-[tf])
	    return 1
	    ;;
	-[)
	    return 1
	    ;;
	-])
	    return 0
	    ;;
	-\\[\\])
	    return 0
	    ;;
	-*)
	    if [ "$2" = yes ]; then
		return 0
	    else
		return 1
	    fi
	    ;;
	*)
	    return 1
	    ;;
    esac
}

function es_print_sans_newline
{
    es_print_value=no


    printf "("

    while [ $# -gt 0 ]; do
	case "$1" in 
	    --*=*)
                if [ ${es_print_value} = yes ]; then
		    printf ") "
		fi

                printf "%s" "`echo $1 | sed -e 's/^--\([^=]*\)=\(.*\)$/:\1 \2/'`"
		es_print_value=no

		if ! es_print_tail_p "$2" "${es_print_value}"; then
			printf " "
		fi

		shift
		;;
	    --*)
		if [ ${es_print_value} = yes ]; then
		    printf ") "
		    es_print_value=no
		fi
		
		printf "%s" "`echo $1 | sed -e 's/^--/:/'`"
		es_print_value=yes
		printf " ("

		shift
		;;
	    -[])
	        printf "()"
		if ! es_print_tail_p "$2" "${es_print_value}"; then
		    printf " "
		fi
		shift
		;;
	    -[)
	        printf "("
		shift
		;;
            -])
	        printf ")"
                if ! es_print_tail_p "$2" "${es_print_value}"; then
		    printf " "
		fi
		shift
		;;
	    -S=*)
                printf "%s" "`echo $1 | sed -e 's/^-\([^=]*\)=\(.*\)$/\|\2\|/'`"
		if ! es_print_tail_p "$2" "${es_print_value}"; then
		    printf " "
		fi
		shift
		;;
	    -s=*)
                printf "%s" "`echo $1 | sed -e 's/^-\([^=]*\)=\(.*\)$/\"\2\"/'`"
		if ! es_print_tail_p "$2" "${es_print_value}"; then
		    printf " "
		fi
		shift
		;;
	    -[tf])
	        printf "%s" "`echo $1 | sed -e 's/^-\([tf]\)$/#\1/'`"
		if ! es_print_tail_p "$2" "${es_print_value}"; then
		    printf " "
		fi
		shift
		;;
	    *)
		printf "%s" "$1"
		if ! es_print_tail_p "$2" "${es_print_value}"; then
		    printf " "
		fi
		shift
		;;
	    esac
    done
    
    if [ ${es_print_value} = yes ]; then
		    printf ")"
		    es_print_value=no
    fi

    printf ")"
}

#
# (Test
#
#   $ ./es-lang-sh-print  a b c --d --e f -t -f --g h i -z f --j=a -f=f a b c -f a b c --z
#    (a b c :d () :e (f) #t #f :g (h i) :z (f) :j a :f f a b c #f a b c :z ())
#
# )
#
#
########################################################################
: libsrpmix.sh ends here

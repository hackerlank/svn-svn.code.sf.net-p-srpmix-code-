#!/bin/bash
#
########################################################################
#
# srpmix-wrap: Wrap a target src.rpm to build srpmixed package
#
# Copyright (C) 2008 Masato Taruishi
#
# Author: Masato Taruishi <taruishi@redhat.com>
#
# program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
########################################################################

RPMBUILD=rpmbuild

LIBSRPMIX=libsrpmix.sh
function try_source
{
    source $1
    if test $? != 0; then
        echo "*** ABORT..." "cannot find $1" 1>&2
	exit 1
    fi
}
try_source ${LIBSRPMIX}


OUTPUTDIR=
TMPDIR=
JUST_PRINT=
DUMP_SPEC=
OPT_TYPE=core
OPT_PLUGIN_NAME=plugins

function print_usage
{
    echo "Usage: "
    echo "  srpmix-wrap [--help|-h]"
    echo "  srpmix-wrap [--dump-spec|--just-print] [--type=core] [SRPMS...]"
    echo "  srpmix-wrap [--output-dir=OUTPUTDIR] [--release=RELEASE] [--type=core] [SRPMS...]"
    echo "  srpmix-wrap [--dump-spec|--just-print] [--type=plugin] [SWRFS...]"
    echo "  srpmix-wrap [--output-dir=OUTPUTDIR] [--release=RELEASE] --type=plugin [--plugin-name=<name>] [--enable=<plugins>...] [--disable=<plugins>...] [SWRFS...]"
    echo ""
    echo "  If SRPMS is not given, standard input is"
    echo "  used for the list of source packages."
    echo 
}

function cleanup
{
    if test -d "$TMPDIR"; then
        rm -rf $TMPDIR || true
    fi
}

function parse_arguments
{
    while [ $# -gt 0 ]; do
	case "$1" in
	    --help|-h)
		print_usage
		exit 0
		;;
	    --output-dir=*)
	        OUTPUTDIR=$(echo $1 | sed 's/--output-dir=//')
		;;
            --release=*)
	        SRPMIX_PKG_RELEASE=$(echo $1 | sed 's/--release=//')
		;;
	    --dump-spec)
	        DUMP_SPEC=1
		;;
	    --just-print)
	        JUST_PRINT=1
		;;
            --type=*)
	        OPT_TYPE=$(echo $1 | sed 's/--type=//')
		;;
            --enable=*)
	        SRPMIX_ENABLE_PLUGIN=$(echo $1 | sed 's/--enable=//')
		;;
            --disable=*)
	        SRPMIX_ENABLE_PLUGIN=$(echo $1 | sed 's/--disable=//')
		;;
            --plugin-name=*)
	        OPT_PLUGIN_NAME=$(echo $1 | sed 's/--plugin-name=//')
		;;
	    *)
		break
		;;
	esac
	shift
    done

    if test "x$1" = "x"; then

            while read tmp; do
	  srpms="${srpms} ${tmp}"
	done
    else
	srpms=$@	
    fi

    if test "x${JUST_PRINT}" != "x" \
       -a "x${DUMP_SPEC}" != "x"; then
       print_usage 1>&2
       srpmix_abort "Specify either --just-print or --dump-spec"
    fi

    if test "x$OUTPUTDIR" = "x"; then
	OUTPUTDIR=.
    fi
    if test ! -d "${OUTPUTDIR}"; then
	srpmix_abort "No such directory: ${OUTPUTDIR}"
    fi
}

function create_core_spec
{
    local target_srpm=$1
    local spec=
    local wrapped_name=
    local es_name=

    pvrd=$($RPM -qp --nosignature --queryformat "%{NAME} %{VERSION} %{RELEASE} %{Description}" $target_srpm)
    package=$(echo $pvrd | cut -d' ' -f1)
    version=$(echo $pvrd | cut -d' ' -f2)
    release=$(echo $pvrd | cut -d' ' -f3)
    description="$(echo $pvrd | cut -d' ' -f4-)"
    wrapped_name=$(srpmix_build_wrapped_name "$package" "$version" "$release")
    if test "x$package" = "x"; then
        echo "warning: failed to parse $target_srpm: ignored" 1>&2
        return
    fi

    es_name=$(es_print srpmix-wrap name\
       --target-srpm="\"$(basename $target_srpm)\"" \
       --package="\"${package}\"" \
       --version="\"${version}\"" \
       --release="\"${release}\"" \
       --wrapped-name="\"${wrapped_name}\"")
    if test "x$JUST_PRINT" != "x"; then
       echo "$es_name"
       return
    fi
    
    group=$($RPM -qp --nosignature --queryformat "%{Group}" $target_srpm)
    license=$($RPM -qp --nosignature --queryformat "%{License}" $target_srpm)
#    changelog=$(LANG=C $RPM -qp --nosignature --changelog $target_srpm | sed 's/%/%%/g')
#    if test "x$changelog" = "x(none)"; then
#        changelog=""
#    fi
    buildarch=$($RPM -qp --nosignature --queryformat "%{BUILDARCHS}" $target_srpm)
    if test "x$buildarch" = "x(none)"; then
        buildarch="noarch"
    fi

    srcdir=$(srpmix_srcdir $package $version $release)
    installdir=$(srpmix_installdir $package $version $release)

    cat <<EOF
Summary: Source Information for package $package ($version-$release)
Name: ${wrapped_name}
Version: $SRPMIX_PKG_VERSION
Release: $SRPMIX_PKG_RELEASE%{?dist}.swrf
Source: `basename $target_srpm`
Autoreq: 0
BuildRequires: srpmix
BuildRequires: rsync
Buildarch: $buildarch

Buildroot: %{_tmppath}/%{name}-root
Group: $group
License: $license

%define __os_install_post true

%description
$description

%package archives
Group: $group
Summary: Source Archives for package $package ($version-$release)

%description archives
$description

%prep
if test -d %{_builddir}/%{name}; then 
  chmod -R u+w  %{_builddir}/%{name}
  rm -rf %{_builddir}/%{name}
fi

%build
srpmix-ix -f -v %{_builddir}/%{name} \
    %{_sourcedir}/`basename $target_srpm`
srpmix-plugin --enable=50srpmix-coreutils,50srpmix-file,60srpmix-etags %{_builddir}/%{name}

%install
rm -rf \$RPM_BUILD_ROOT
mkdir -p \$RPM_BUILD_ROOT/$installdir

from=%{_builddir}/%{name}
to=\$RPM_BUILD_ROOT/$installdir
transfer_cmd=
if test \$(stat --format="%D" \$from) = \$(stat --format="%D" \$to); then
   transfer_cmd="cp -a -l"
else
   transfer_cmd="rsync -a"
fi
\$transfer_cmd \$(/bin/ls -d \$from/* | grep -v LOG | grep -v SPECS\$) \$to
mv \$RPM_BUILD_ROOT/$installdir/*.spec \$RPM_BUILD_ROOT/$installdir/specs.spec

%clean
chmod -R u+w \$RPM_BUILD_ROOT
rm -rf \$RPM_BUILD_ROOT

%files
%defattr(-,root,root)
# ${SRPMIX_VAR_DIR}
# ${SRPMIX_SOURCES_DIR}/
# ${SRPMIX_SOURCES_DIR}/*
# ${SRPMIX_SOURCES_DIR}/*/*
# ${SRPMIX_SOURCES_DIR}/*/*/*/
/${SRPMIX_SOURCES_RDIR}/*/*/*/SRPMIX
/${SRPMIX_SOURCES_RDIR}/*/*/*/STATUS
/${SRPMIX_SOURCES_RDIR}/*/*/*/pre-build
/${SRPMIX_SOURCES_RDIR}/*/*/*/plugins
/${SRPMIX_SOURCES_RDIR}/*/*/*/specs.spec

%files archives
%defattr(-,root,root)
# ${SRPMIX_SOURCES_DIR}/*/*/*/archives
/${SRPMIX_SOURCES_RDIR}/*/*/*/archives

%changelog
* Sat Jun  2 2007 SRPMIX WRAP <consulting-jp@redhat.com> $package-$version-$release
- Automatically generated.

EOF

}

function create_plugin_spec
{
    target_swrf=$1
    plugins_name=$2

    pvrd=$($RPM -qp --nosignature --queryformat "%{NAME} %{VERSION} %{RELEASE} %{Description}" $target_swrf)
    package=$(echo $pvrd | cut -d' ' -f1)
    version=$(echo $pvrd | cut -d' ' -f2)
    release=$(echo $pvrd | cut -d' ' -f3)
    description="$(echo $pvrd | cut -d' ' -f4-)"
    installdir=$(dirname $($RPM -qpl "$target_swrf"  | head -1))

    if test "x$package" = "x"; then
        echo "warning: failed to parse $target_swrf: ignored" 1>&2
        return
    fi

    plugin_package_name="$package"-$plugins_name

    group=$($RPM -qp --nosignature --queryformat "%{Group}" $target_swrf)
    license=$($RPM -qp --nosignature --queryformat "%{License}" $target_swrf)
    arch=$($RPM -qp --nosignature --queryformat "%{ARCH}" $target_swrf)
    if test "x$buildarch" = "x(none)"; then
        buildarch="noarch"
    fi

    for plugin in `list_plugins`
    do
      enable_plugin="$enable_plugin,$(basename $plugin)"
    done
    if test "x$enable_plugin" != "x"; then
      enable_plugin="--enable='$enable_plugin'"
    fi

    cat <<EOF
Summary: $plugins_name information for package $package
Name: ${plugin_package_name}
Version: $SRPMIX_PKG_VERSION
Release: $SRPMIX_PKG_RELEASE%{?dist}.swrf
Source: $(basename $target_swrf)
Autoreq: 0
BuildRequires: rsync srpmix
Buildarch: $arch

Buildroot: %{_tmppath}/%{name}-root
Group: $group
License: $license

%define __os_install_post true

%description
$description

%prep
if test -d %{_builddir}/%{name}; then 
  chmod -R u+w  %{_builddir}/%{name}
  rm -rf %{_builddir}/%{name}
fi
mkdir -p %{_builddir}/%{name}
srpmix-db --root=%{_builddir}/%{name}/$SRPMIX_VAR_DIR --noplugin -i %{_sourcedir}/`basename $target_swrf`

%build
touch %{_builddir}/%{name}/.run-plugin
sleep 1
srpmix-plugin $enable_plugin %{_builddir}/%{name}/$SRPMIX_VAR_DIR/$installdir

%install
rm -rf \$RPM_BUILD_ROOT
mkdir -p \$RPM_BUILD_ROOT/$installdir

from=%{_builddir}/%{name}/$SRPMIX_VAR_DIR
to=\$RPM_BUILD_ROOT
transfer_cmd=
if test \$(stat --format="%D" \$from) = \$(stat --format="%D" \$to); then
   transfer_cmd="cp -l"
else
   transfer_cmd="cp"
fi
( cd \$from; find . -newer %{_builddir}/%{name}/.run-plugin -not -type d | 
while read f; do
  install -d \$to/\$(dirname \$f)
  \$transfer_cmd \$f \$to/\$f
done )

rm -rf \$to/db
find \$to -name '*-log.es' | xargs rm

%clean
chmod -R u+w \$RPM_BUILD_ROOT
rm -rf \$RPM_BUILD_ROOT

%files
/${SRPMIX_SOURCES_RDIR}/*/*/*/

%changelog
* Sat Jun  2 2007 SRPMIX WRAP <consulting-jp@redhat.com> $package-$version-$release
- Automatically generated.

EOF

}


# A src.rpm is.
# => src.rpm for Foo is wrapped to srpmixed src.rpm by this function.
# ==> srpmixed rpm is created from srpmixed src.rpm by rpmbuild.
# ===> By Installing srpmixed rpm source files of Foo are deployed as if src.rpm for Foo is deployed 
#      by srpmix command.
#
# wrap_srpm srpm-file
#
function wrap_srpm
{
    target=$1
    spec=
    wrapped_name=
    es_name=

    pvrd=$(rpm -qp --nosignature --queryformat "%{NAME} %{VERSION} %{RELEASE} %{Description}" $target)
    package=$(echo $pvrd | cut -d' ' -f1)
    version=$(echo $pvrd | cut -d' ' -f2)
    release=$(echo $pvrd | cut -d' ' -f3)
    description="$(echo $pvrd | cut -d' ' -f4-)"

    case "$OPT_TYPE" in
        core)
            wrapped_name=$(srpmix_build_wrapped_name "$package" "$version" "$release")
            ;;
        plugin)
            wrapped_name="$package"-"$OPT_PLUGIN_NAME"
            ;;
    esac

    es_name=$(es_print srpmix-wrap name\
	--target-srpm="\"$(basename $target)\"" \
	--package="\"${package}\"" \
	--version="\"${version}\"" \
	--release="\"${release}\"" \
	--wrapped-name="\"${wrapped_name}\"" )

    if test "x${DUMP_SPEC}" = "x"; then
	spec="$TMPDIR/SPECS/${wrapped_name}.spec"
    else
	spec="/dev/stdout"
	if test ! -w "${spec}"; then
	    # ???
	    spec="/dev/tty"
	fi
    fi

    case "$OPT_TYPE" in
        core)
	    create_core_spec "$target" > "$spec"
            ;;
        plugin)
	    create_plugin_spec "$target" "$OPT_PLUGIN_NAME" > "$spec"
            ;;
    esac

    if test "x${DUMP_SPEC}" != "x"; then
	printf "# "
	echo "$es_name"
	return
    fi

    cp $target $TMPDIR/SOURCES/
    $RPMBUILD --quiet --define "_topdir $TMPDIR" -bs "$spec" > /dev/null
    wrapped_srpm=$(/bin/ls $TMPDIR/SRPMS/*-$SRPMIX_PKG_VERSION-$SRPMIX_PKG_RELEASE*.swrf.src.rpm)
    mv "${wrapped_srpm}" "${OUTPUTDIR}"
    rm $TMPDIR/SOURCES/`basename $target`
    echo "$es_name"

    es_print srpmix-wrap done \
	--file="\"$(ls ${OUTPUTDIR}/$(basename ${wrapped_srpm}))\""
}

function main
{
    srpmix_verify_commands "${RPMBUILD}"
    parse_arguments "$@"

    if test "x${JUST_PRINT}" = "x" \
	-o "x${DUMP_SPEC}" = "x"; then
	TMPDIR=`mktemp -d`
	trap cleanup 0
	install -d $TMPDIR/{SPECS,BUILD,SOURCES,SRPMS}
    fi

    for srpm in $srpms
    do
        if test -f "$srpm"; then
	    wrap_srpm "$srpm"
        else
            srpmix_abort "No such file: $srpm"
        fi
    done
}

RUN=
if test "x${DUMP_SPEC}" = "x"; then
    RUN=es_time
fi
${RUN} main "$@"

exit $?

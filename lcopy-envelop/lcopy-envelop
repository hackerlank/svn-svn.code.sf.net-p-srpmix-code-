#!/bin/bash
########################################################################
#
# lcopy: Make a package of a symblic link to a lcopy dir
#
# Copyright (C) 2009, 2012 Masatake YAMATO
#
# Author: Masatake YAMATO <yamato@redhat.com>
#
# program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
########################################################################


source liblcopy.sh  || exit 1
source libsrpmix.sh || exit 1

LCOPY_ENVELOP_VERSION=${LCOPY_VERSION}
LINKIN_ROOT_DIR=

RELEASE=0
ROOT_DIR=
INPUT=
OUTPUT_DIR=.

function print_usage
{
    echo "Usage: "
    echo "$0 --help|-h"
    echo "$0 [--output-dir=OUTPUT-DIR] LCOPY_ROOT_DIR LINKIN_ROOT_DIR FILE.lcopy"
    echo "LCOPY_ROOT_DIR: the root directory where the source code is"
    echo "LINKIN_ROOT_DIR: the root directory where the symbolic link is put"
}

function parse_arguments
{
    while [ $# -gt 0 ]; do
	case "$1" in
	    --help|-h)
		print_usage
		exit 0
		;;
	    (--output-dir=*)
                OUTPUT_DIR=${1/--output-dir=}
                ;;
	    --*)
		echo "unknown option: $1" 1>&2
		print_usage 1>&2
		exit 1
		;;
	    *)
		break
		;;
	esac
	shift
    done

    if ! [ -d "$OUTPUT_DIR" ]; then
	echo "no such directory: $OUTPUT_DIR" 1>&2
	exit 1
    fi
    
    if ! [ -w "$OUTPUT_DIR" ]; then
	echo "cannot write to: $OUTPUT_DIR" 1>&2
	exit 1
    fi
	

    if [ $# -ne 3 ]; then
	echo "wrong number of arguments: $@" 1>&2
	print_usage 1>&2
	exit 1
    fi


    ROOT_DIR=$1
    shift
    if ! [ -d "$ROOT_DIR" ]; then
	echo "no such directory: $ROOT_DIR" 1>&2
	exit 1
    fi
    ROOT_DIR=$(cd ${ROOT_DIR}; pwd)


    LINKIN_ROOT_DIR=$1
    shift
    if ! [ -d "$LINKIN_ROOT_DIR" ]; then
	echo "no such directory: $LINKIN_ROOT_DIR" 1>&2
	exit 1
    fi
    LINKIN_ROOT_DIR=$(cd ${LINKIN_ROOT_DIR}; pwd)
    

    INPUT=$1
    shift
    if ! [ -r "$INPUT" ]; then
	echo "no such file: $INPUT" 1>&2
	exit 1
    fi
}

# TODO: this should be part libsrpmix.
function dirpkg_created_p
{
    local pkg=$1
    local output_dir=$2

    local p=$(srpmix_srchash $pkg)
    local f=${output_dir}/dir-pkg/$p/$(srpmix_dirpkg_name $pkg)-${SRPMIX_PKG_MAJOR_VERSION}*.rpm

    local r
    test -f $f
    r=$?
    if test $r = 2; then
	echo "test -f meets multiple arguments: " 1>&2
	ls $f 1>&2
	echo 1>&2
	echo 1>&2
    fi
    return $r
}

function package_full_name
{
    # ???: Looking for better name
    local package=$1
    local branch=$2

    echo $(srpmix_build_wrapped_name "$package" "lcopy" "$branch")
}

function pkg_created_p
{
    local package=$1
    local branch=$2
    local output_dir=$3

    local p=$(srpmix_srchash $package)
    local f=${output_dir}/$p/$(package_full_name $package $branch)-${LCOPY_ENVELOP_VERSION}-${RELEASE}.noarch.rpm

    local r
    test -f $f
    r=$?

    return $r
}

function genspec
{
    local root_dir=$1
    local package=$2
    local branch=$3
    local full_name
    local req_pkg

    req_pkg=$(srpmix_dirpkg_name $package)
    full_name=$(package_full_name "$package" "$branch")

    local linkin_mark="^"
    local link="${linkin_mark}lcopy-${branch}"
    local hash=$(srpmix_srchash $package)
    local from=${LINKIN_ROOT_DIR}/${hash}/"${package}"/"${link}"
    local to=${root_dir}/${hash}/"${package}"/"${branch}"
    local relative=$(lcopy_relative_path "$from" "$to")

    cat <<EOF
Summary: Link for $package,$branch source code updated by lcopy
Name: ${full_name}
Version: ${LCOPY_ENVELOP_VERSION}
Release: ${RELEASE}

Autoreq: 0
Requires: $req_pkg
BuildRequires: coreutils
BuildArchitectures: noarch

License: GPL
Group: Development/Tools
URL: http://srpmix.org
BuildRoot: %{_tmppath}/%{name}-%{version}-%{release}-root

%define __os_install_post true

%description
Link for $package,$branch source code updated by lcopy

%prep

%build

%install
rm -rf \$RPM_BUILD_ROOT
mkdir -p \$RPM_BUILD_ROOT${LINKIN_ROOT_DIR}/${hash}/${package}
ln -s $relative \$RPM_BUILD_ROOT${LINKIN_ROOT_DIR}/${hash}/${package}/${link}

%clean
rm -rf \$RPM_BUILD_ROOT

%files
%defattr(-,root,root)
${LINKIN_ROOT_DIR}/${hash}/${package}/${link}

%changelog
* Sat Jun  2 2007 LCOPY ENVELOP <consulting-jp@redhat.com> $package
- Automatically generated.

EOF
}

function build
{
    local spec_file=$1
    local tmp_dir=$2


    ( cd $tmp_dir && mkdir -p RPMS SRPMS BUILD BUILDROOT SPECS SOURCES )
    rpmbuild  --define "_rpmdir $tmp_dir/RPMS"		\
              --define "_srcrpmdir $tmp_dir/SRPMS"		\
              --define "_builddir $tmp_dir/BUILD"		\
              --define "_buildrootdir $tmp_dir/BUILDROOT"	\
              --define "_specdir $tmp_dir/SPECS"		\
              --define "_sourcedir $tmp_dir/SOURCES"		\
              -ba ${spec_file} || return 1
    return 0
}

function transfer
{
    local rpm_file=$1
    local output_dir=$2
    local hash=$(srpmix_srchash $rpm_file)

    mkdir -p $output_dir/$hash
    mv "$rpm_file" $output_dir/$hash
}

function main
{
    parse_arguments "$@"

    source "${INPUT}"               || exit 1
    if [ -z "${LCOPY_PACKAGE}" ]; then
	echo "no LCOPY_PACKAGE in ${INPUT}" 1>&2
	exit 1
    fi
    if [ -z "${LCOPY_BRANCH}" ]; then
	echo "no LCOPY_BRANCH in ${INPUT}" 1>&2
	exit 1
    fi
    
    if ! dirpkg_created_p "$LCOPY_PACKAGE" "$OUTPUT_DIR"; then
	if ! srpmix-dir-pkg "$LCOPY_PACKAGE" "$OUTPUT_DIR"; then
	    echo "failed in srpmix-dir-pkg $LCOPY_PACKAGE $OUTPUT_DIR" 1>&2
	    exit 1
	fi
    fi
    

    if ! pkg_created_p "$LCOPY_PACKAGE" "$LCOPY_BRANCH" "$OUTPUT_DIR"; then
	local tmp_dir=`mktemp -d`
	trap "chmod -R u+w $tmp_dir; /bin/rm -rf $tmp_dir" 0    
    
	local spec_file=$(package_full_name "$LCOPY_PACKAGE" "$LCOPY_BRANCH").spec
	genspec "${ROOT_DIR}" "${LCOPY_PACKAGE}" "${LCOPY_BRANCH}" > ${tmp_dir}/$spec_file
	if ! build ${tmp_dir}/$spec_file ${tmp_dir}; then
	    echo "### failed in rpmbuild" 1>&2
	    cat ${tmp_dir}/$spec_file 1>&2
	    exit 1
	fi
	transfer $tmp_dir/RPMS/noarch/*.rpm ${OUTPUT_DIR}
    fi
}

main "$@"

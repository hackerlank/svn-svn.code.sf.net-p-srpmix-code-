#!/bin/bash


PKGCONFDIR=/etc/sbuild
PKGDATADIR=/usr/share/sbuild

SBUILD_CONF=${PKGCONFDIR}/sbuild.cf
SOP_CONF_DIR=/etc/sop

CREATEREPO_ONLY=
DONT_CREATEREPO=
TARGET_MIRROR=


function print_usage
{
    echo "Usage: "
    echo "  sbuild --help"
    echo "  sbuild [--sbuild-conf=FILE] [--sop-conf-dir=DIR]"
    echo "         [--tmpdir=TMPDIR]"
    echo "         [--release=RELEASE]"
    echo "         [--debug]"
    echo "         [--tstamp-dir=TSTAMPDIR]"
    echo "         [--target-mirror=NAME]"
    echo "         [--createrepo-only]"
    echo "         [--dont-createrepo]"
    echo "         [--use-tmpfs=GBYTE]"
    echo "         [--jobs=J]"
    echo "         [--load=L]"
}

function prepare_conf
{
    while [ $# -gt 0 ]; do
	case "$1" in
	    --sbuild-conf=*)
                SBUILD_CONF=${1/--sbuild-conf=/}
		;;
	    --sop-conf-dir=*)
                SOP_CONF_DIR=${1/--sop-conf-dir=/}
                ;;
	 esac
	 shift
    done

    if test -f "${SBUILD_CONF}"; then
	source "${SBUILD_CONF}"
    else
	echo "Cannot load ${SBUILD_CONF} file" 1>&2
	exit 1
    fi

    if test -f "${SOP_CONF_DIR}/sop.cf"; then
	source "${SOP_CONF_DIR}/sop.cf"
    else
	echo "Cannot load ${SOP_CONF_DIR}/sop.cf file" 1>&2
	exit 1
    fi

}

function parse_arguments
{
    prepare_conf "$@"

    while [ $# -gt 0 ]; do
	case "$1" in
	    --help|-h)
		print_usage
		exit 0
		;;
	    --sbuild-conf=*)
                :
		;;
	    --sop-conf-dir=*)
                :
                ;;
	    --tmpdir=*)
                SBUILD_TMPDIR=${1/--tmpdir=/}
		;;
	    --release=*)
                # RELEASE=`date +%Y%m%d`
	        SBUILD_RELEASE=${1/--release=/}
		;;
	    --debug)
	        SBUILD_DEBUG=y
                ;;
	    --target-mirror=)
	        TARGET_MIRROR=${1/--target-mirror=/}
		;;
            --tstamp-dir=*)
	        SBUILD_TSTAMPDIR=${1/--tstamp-dir=/}
	        ;;
	    --createrepo-only)
	        CREATEREPO_ONLY=yes
		;;
            --dont-createrepo)
	        DONT_CREATEREPO=yes
		;;
	    --use-tmpfs=*)
	        local tmpfs_size=${1/--use-tmpfs=/}
		mkdir -p ${SBUILD_TMPDIR}
	        if { mount | grep ${SBUILD_TMPDIR}; } > /dev/null; then
		    :
		else
		    if ! mount -t tmpfs -o size=${tmpfs_size}G tmpfs "${SBUILD_TMPDIR}"; then
			echo "Failed in mounting tmpfs on "${SBUILD_TMPDIR}" with size ${tmpfs_size}G" 1>&2
			exit 1
		    fi
		fi
		;;
	    --load=*)
	        SBUILD_LOAD=${1/--load=/}
		;;
	    --jobs=*)
	        SBUILD_JOBS=${1/--jobs=/}

		;;
            *)
	        print_usage 1>&2
		exit 1
		;;
        esac
	shift
    done
    
    SBUILD_JOBS=${SBUILD_JOBS:-1}
    SBUILD_LOAD=${SBUILD_LOAD:-1}
}


function run_make
{
    local cf=$1
    local name=$2
    local tstampdir
    local mkfile

    local h
    local f
    local all_h
    local last_h

    source $cf
    if test -z "${BUILD}"; then
	echo "No BUILD in $cf" 1>&2
	return 1
    fi

    if test "${BUILD}" != yes; then
	return 0
    fi

    tstampdir=${SBUILD_TSTAMPDIR}/$name
    mkdir -p ${tstampdir}
    mkfile=${tstampdir}/sbuild-${name}.mk
    echo "include sbuild.mk"              > $mkfile
    echo ""                               >> $mkfile

    cat ${SOP_MIRROR_DIR}/${name}/PKGS | while read f; do
	if [[ -z "$f" ]]; then
	    break
	fi
	f=$(basename $f)
	h=${f:0:1}

	if [[ "x${h}" != "x${last_h}" ]]; then
#           Cannot return the result to parent process.
#	    all_h="$all_h $h"
	    last_h=$h
	    install -d ${tstampdir}/$h
	    echo ""                                 >> $mkfile
	    echo "sub-$h: \\"                       >> $mkfile
	fi
	echo ${f/.src.rpm/.src.log}                 >> $mkfile
    done

    all_h=$(cat ${SOP_MIRROR_DIR}/${name}/PKGS | sed -e 's/\(.\).*$/\1/' | uniq)
    echo "" >> $mkfile
    echo  "all: \\" >> $mkfile
    for h in $all_h; do 
	echo "sub-$h \\" >> $mkfile
    done
    echo "" >> $mkfile
    
    echo '#' for h in $all_h\; do  make  --makefile=$mkfile	\
        --include-dir=${PKGDATADIR}				\
        --keep-going						\
        --environment-overrides					\
	--directory=${tstampdir}/\$h			        \
        --jobs=${SBUILD_JOBS}					\
	--max-load=${SBUILD_LOAD}				\
        TMPDIR=${SBUILD_TMPDIR}					\
        OUTPUTDIR=${SOP_REPO_DIR}/${name}			\
        VPATHFILE=${SOP_MIRROR_DIR}/${name}/VPATH               \
	BLACKLISTDIR=${tstampdir}/blacklist.d			\
        RELEASE=${SBUILD_RELEASE}				\
	DEBUG=${SBUILD_DEBUG}\; done        >> $mkfile

    mkdir -p ${SOP_REPO_DIR}/${name}
    mkdir -p ${tstampdir}/blacklist.d
    for h in $all_h; do 
	echo "Processing $h"
	make  --makefile=$mkfile			\
              --include-dir=${PKGDATADIR}		\
              --keep-going				\
              --environment-overrides			\
	      --directory=${tstampdir}/$h               \
              --jobs=${SBUILD_JOBS}			\
	      --max-load=${SBUILD_LOAD}			\
              TMPDIR=${SBUILD_TMPDIR}			\
              OUTPUTDIR=${SOP_REPO_DIR}/${name}         \
              VPATHFILE=${SOP_MIRROR_DIR}/${name}/VPATH \
	      BLACKLISTDIR=${tstampdir}/blacklist.d     \
              RELEASE=${SBUILD_RELEASE}			\
	      DEBUG=${SBUILD_DEBUG}			\
	      sub-$h
    done

}

function run_rsync
{
    local cf=$1
    local name=$2

    source $cf
    if test -z "${BUILD}"; then
	echo "No BUILD in $cf" 1>&2
	return 1
    fi

    if test "${BUILD}" != yes; then
	return 0
    fi

    mkdir -p ${SOP_BLACKLIST_DIR}/${name}
    rsync -a ${SBUILD_TSTAMPDIR}/${name}/blacklist.d/ ${SOP_BLACKLIST_DIR}/${name}
}

function run_creterepo
{
    local cf=$1
    local name=$2

    source $cf

    if test -d ${SOP_REPO_DIR}/${name}; then
	${PKGDATADIR}/sbuild-createrepo.mk -C ${SOP_REPO_DIR}/${name}
    fi
}

function repogc
{
    local cf=$1
    local name=$2


    source $cf
    find ${SOP_REPO_DIR}/${name} -type f \
	| gosh ${PKGDATADIR}/gc-repo-srpmix-version.scm


    if test -z "${GC}"; then
	echo "No GC in $cf" 1>&2
	return 1
    fi
    
    if test -z "${BUILD}"; then
	echo "No BUILD in $cf" 1>&2
	return 1
    fi
    
    if test ${GC} != yes; then
	return 0
    fi

    if test ${BUILD} != yes; then
	return 0
    fi

    local repo_dir=${SOP_REPO_DIR}/${name}
    local dist_mapping=${SOP_REPO_DIR}/${name}/${name}.es
    
    if ! test -f ${dist_mapping}; then
	return 0
    fi
    :
    : TODO gc-repo-pkg-version.scm
    :
}

function create_weakview
{
    local cf=$1
    local name=$2
    local today

    source $cf


    if test -z "${GC}"; then
	echo "No GC in $cf" 1>&2
	return 1
    fi
    
    if test -z "${BUILD}"; then
	echo "No BUILD in $cf" 1>&2
	return 1
    fi
    
    if test ${GC} != yes; then
	return 0
    fi

    if test ${BUILD} != yes; then
	return 0
    fi

    local repo_dir=${SOP_REPO_DIR}/${name}
    local dist_mapping=${SOP_REPO_DIR}/${name}/${name}.es
    if ! test -f ${dist_mapping}; then
	return 0
    fi
    :
    :  TODO
    :
}

function main
{
    local name
    prepare_conf "$@"	
    parse_arguments "$@"

    for cf in ${SOP_CONF_DIR}/mirror.d/*; do
	name=$(basename $cf)
	
	if test -z "$TARGET_MIRROR" \
	    || test "$TARGET_MIRROR" = $name; then
	    if test -z "$CREATEREPO_ONLY"; then
		( run_make $cf $name )
		( run_rsync $cf $name )
	    fi

	    if test -z "$DONT_CREATEREPO"; then
                ( repogc $cf $name )
		( create_weakview $cf $name )
		( run_creterepo $cf $name )
	    fi
	fi
    done

    
}

time main "$@"

#!/bin/bash
# REQUIRE: rsync
# verify_command srpmix
# Record all pkgs to a external file

PKGCONFDIR=/etc/sbuild
PKGDATADIR=/usr/share/sbuild
LIST_MAKER=cat
DONT_CREATEREPO=
RSYNC=rsync

SBUILD_CONF=${PKGCONFDIR}/sbuild.cf
SOP_CONF=/etc/sop/sop.cf


function print_usage
{
    echo "Usage: "
    echo "  sbuild --help"
    echo "  sbuild [--sbuild-conf=FILE] [--sop-conf=FILE]"
    echo "         [--tmpdir=TMPDIR]"
    echo "         [--output-dir=OUTPUTDIR]"
    echo "         [--release=RELEASE]"
    echo "         [--debug]"
    echo "         [--blacklist-dir=BALCKLISTDIR]"
    echo "         [--tstamp-dir=TSTAMPDIR]"
    echo "         [--vpath-file=VPATHFILE]"
    echo "         [--all-pkgs]"
    echo "         [--createrepo-only]"
    echo "         [--dont-createrepo]"
    echo "         [--use-tmpfs=GBYTE]"
    echo "         [--jobs=J]"
    echo "         [--load=L]"
}

function prepare_conf
{
    while [ $# -gt 0 ]; do
	case "$1" in
	    --sbuild-conf=*)
                SBUILD_CONF=${1/--sbuild-conf=/}
		;;
	    --sop-conf=*)
                SOP_CONF=${1/--sop-conf=/}
                ;;
	 esac
	 shift
    done

    if test -f "${SBUILD_CONF}"; then
	source "${SBUILD_CONF}"
    else
	echo "Cannot load ${SBUILD_CONF} file" 1>&2
	exit 1
    fi

    if test -f "${SOP_CONF}"; then
	source "${SOP_CONF}"
    else
	echo "Cannot load ${SOP_CONF} file" 1>&2
	exit 1
    fi

}

function parse_arguments
{
    prepare_conf "$@"

    while [ $# -gt 0 ]; do
	case "$1" in
	    --help|-h)
		print_usage
		exit 0
		;;
	    --sbuild-conf=*)
                :
		;;
	    --sop-conf=*)
                :
                ;;
	    --tmpdir=*)
                SBUILD_TMPDIR=${1/--tmpdir=/}
		;;
	    --output-dir=*)
	        SBUILD_OUTPUTDIR=${1/--output-dir=/}
		;;
	    --release=*)
                # RELEASE=`date +%Y%m%d`
	        SBUILD_RELEASE=${1/--release=/}
		;;
	    --debug)
	        SBUILD_DEBUG=y
                ;;
            --blacklist-dir=*)
	        SBUILD_BLACKLISTDIR=${1/--blacklist-dir=/}
	        ;;
            --tstamp-dir=*)
	        SBUILD_TSTAMPDIR=${1/--tstamp-dir=/}
	        ;;
            --vpath-file=*)
	        SBUILD_VPATHFILE=${1/--vpath-file=/}
		;;
	    --all-pkgs)
	        LIST_MAKER="${PKGDATADIR}/sbuild-srpm-list.shf ${SOP_MIRROR_DIR}"
		;;
	    --createrepo-only)
	        run_creterepo
		exit $?
		;;
            --dont-createrepo)
	        DONT_CREATEREPO=yes
		;;
	    --use-tmpfs=*)
	        local tmpfs_size=${1/--use-tmpfs=/}
		mkdir -p ${SBUILD_TMPDIR}
	        if { mount | grep ${SBUILD_TMPDIR}; } > /dev/null; then
		    echo "A file system is already mounted on ${SBUILD_TMPDIR}" 1>&2
		    exit 1
		else
		    if ! mount -t tmpfs -o size=${tmpfs_size}G tmpfs "${SBUILD_TMPDIR}"; then
			echo "Failed in mounting tmpfs on "${SBUILD_TMPDIR}" with size ${tmpfs_size}G" 1>&2
			exit 1
		    fi
		fi
		;;
	    --load=*)
	        SBUILD_LOAD=${1/--load=/}
		;;
	    --jobs=*)
	        SBUILD_JOBS=${1/--jobs=/}
		;;
            *)
	        print_usage 1>&2
		exit 1
		;;
        esac
	shift
    done

    if ! test -d ${SBUILD_OUTPUTDIR}; then
	mkdir -p ${SBUILD_OUTPUTDIR}
    fi

    if test -z "$SBUILD_VPATHFILE"; then
	${PKGDATADIR}/sbuild-vpath-list.sh ${SOP_MIRROR_DIR} > ${SBUILD_TSTAMPDIR}/vpath.list
	SBUILD_VPATHFILE=${SBUILD_TSTAMPDIR}/vpath.list
    fi

    if ! test -f  "$SBUILD_VPATHFILE"; then
	echo "Cannot read vpathfile: $SBUILD_VPATHFILE" 1>&2
	exit 1
    fi

    if test ${SBUILD_VPATHFILE:0:1} != /; then
	SBUILD_VPATHFILE=$(pwd)/${SBUILD_VPATHFILE}
    fi
    
    SBUILD_JOBS=${SBUILD_JOBS:-1}
    SBUILD_LOAD=${SBUILD_LOAD:-1}
}


function run_make 
{
    local h
    local f
    local last_h
    local mkfile
    local all_h

    mkfile=${SBUILD_TSTAMPDIR}/sbuild-tmp.mk
    echo "include sbuild.mk"              > $mkfile
    echo ""                               >> $mkfile
    
    while read f; do
	f=$(basename $f)
	h=${f:0:1}

	if test "x${h}" != "x${last_h}"; then
	    all_h="$all_h $h"
	    last_h=$h
	    install -d ${SBUILD_TSTAMPDIR}/$h
	    echo ""                                 >> $mkfile
	    echo "sub-$h: \\"                       >> $mkfile
	fi
	echo "$(echo $f | sed 's/\.rpm/.log/g') \\" >> $mkfile
    done

    echo "" >> $mkfile
    echo  "all: \\" >> $mkfile
    for h in $all_h; do 
	echo "sub-$h \\" >> $mkfile
    done
    echo "" >> $mkfile

    echo '#' for h in $all_h; do  make  --makefile=$mkfile	\
                   --include-dir=${PKGDATADIR}			\
                   --keep-going					\
                   --environment-overrides			\
	            --directory=${SBUILD_TSTAMPDIR}/\$h		\
                    --jobs=${SBUILD_JOBS}			\
	            --max-load=${SBUILD_LOAD}			\
                    TMPDIR=${SBUILD_TMPDIR}			\
                    OUTPUTDIR=${SBUILD_OUTPUTDIR}		\
                    VPATHFILE=${SBUILD_VPATHFILE}		\
	            BLACKLISTDIR=${SBUILD_BLACKLISTDIR}		\
                    RELEASE=${SBUILD_RELEASE}			\
	            DEBUG=${SBUILD_DEBUG}\; done        >> $mkfile

    echo "Processing $h"
    for h in $all_h; do 
	make  --makefile=$mkfile			\
              --include-dir=${PKGDATADIR}		\
              --keep-going				\
              --environment-overrides			\
	      --directory=${SBUILD_TSTAMPDIR}/$h	\
              --jobs=${SBUILD_JOBS}			\
	      --max-load=${SBUILD_LOAD}			\
              TMPDIR=${SBUILD_TMPDIR}			\
              OUTPUTDIR=${SBUILD_OUTPUTDIR}		\
              VPATHFILE=${SBUILD_VPATHFILE}		\
	      BLACKLISTDIR=${SBUILD_BLACKLISTDIR}	\
              RELEASE=${SBUILD_RELEASE}			\
	      DEBUG=${SBUILD_DEBUG}			\
	      sub-$h
    done
}

function run_creterepo
{
    ${PKGDATADIR}/sbuild-createrepo.mk -C ${SBUILD_OUTPUTDIR}
}

function run_rsync
{
    mkdir -p ${SOP_BLACKLIST_DIR}
    rsync -a ${SBUILD_BLACKLISTDIR}/ ${SOP_BLACKLIST_DIR}
}

function main
{
    local r


    parse_arguments "$@"
    $LIST_MAKER | run_make

    r=$?

    run_rsync

    if test "x${DONT_CREATEREPO}" != x; then
	return $r;
    fi

    run_creterepo
}

time main "$@"
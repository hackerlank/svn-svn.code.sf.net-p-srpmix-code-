#! /usr/bin/stap -g

%{
#include <linux/sunrpc/svc.h>
#include <linux/fs.h>
%}

function may_read_p:long(access:long) %{
  THIS->__retvalue = (THIS->access == MAY_READ)? 1: 0;
%}

function ifreg_p:long(type:long) %{
  THIS->__retvalue = (THIS->type == S_IFREG)? 1: 0;
%}

function has_ipv4_addr:long(rqstp:long) %{
  struct sockaddr_storage* sa_storage;
  struct sockaddr_in*      sa_in;

  THIS->__retvalue = 0;

  if (((struct svc_rqst*)THIS->rqstp) == NULL)
    return;

  sa_storage = &(((struct svc_rqst*)THIS->rqstp)->rq_addr);
  if (sa_storage->ss_family != AF_INET)
    return;

  sa_in = (struct sockaddr_in*)sa_storage;
  THIS->__retvalue = kread(&sa_in->sin_addr.s_addr);
  THIS->__retvalue = ntohl(THIS->__retvalue);

  CATCH_DEREF_FAULT();
%}

function verify_r:long(r:long) %{
  THIS->__retvalue = THIS->r? 0: 1;
%}

function get_dentry:long(filp:long) %{
  struct file **filp = (struct file**)THIS->filp;

  THIS->__retvalue = 0;

  if (filp && *filp) {
    THIS->__retvalue = (long)((*filp)->f_path.dentry);
  }

  CATCH_DEREF_FAULT();
%}

probe module("nfsd").function("nfsd_open").return {
  successful = verify_r($return)
  if (successful) {

    reg_p  = ifreg_p($type)
    if (reg_p) {

      read_p = may_read_p($access)
      if (read_p) {

	addr   = has_ipv4_addr($rqstp)
	if (addr) {

	  dentry = get_dentry($filp)
	  if (dentry) {

	    path = reverse_path_walk(dentry)
	    if (path != "") {
	      t = gettimeofday_s()
	      printf("%u %u %s\n", addr, t, path)
	    }
	  }
	}
      }
    }
  }
}

#!/bin/bash
LANG=c

function print_usage
{
    echo "$0 --help|-h"
    echo "$0 [--quiet][--debug][--rebuild-cache][--output OUTPUT.es|-] INPUT.elf"
}

function run
{
    local debug_output=$1
    local cmd=$2
    local input=$3
    local s

    if [[ -n "$debug_output" ]]; then
	${cmd} "${input}" | tee "${debug_output}:${cmd}"
    else
	${cmd} "${input}"
	s=$?
	if [[ $s != 0 ]]; then
	   exit $s
	fi 
    fi
}

function cache_at_home
{
    local input=$1
    local sha1sum
    local output

    sha1sum=$(sha1sum < "${input}" | cut -f 1 -d ' ')
    echo ~/.callq"${input},${sha1sum}".es
    return 0
}

function main
{
    local input
    local output
    local debug
    local use_cache
    local quiet
    local rebuild_cache

    while [[ $# -gt 0 ]]; do
	case "$1" in
	    --help|-h)
		print_usage
		return 0
		;;
	    --debug)
		debug=1
		shift
		;;
	    --output)
		shift
		output=$1
		shift
		;;
	    --output=*)
                output=${1/--output=}
		shift
                ;;
	    --quiet)
		quiet=1
		shift
		;;
	    --rebuild-cache)
		rebuild_cache=1
		shift
		;;
	    *)
	        break
	    ;;
	esac
    done

    if [[ $# != 1 ]]; then
	print_usage 1>&2
	return 1
    fi
    
    if [[ ${1:0:1} = "/" ]]; then
	input=$(readlink --canonicalize $1)
    else
	input=$(readlink --canonicalize $(pwd)/$1)
    fi
    if [[ ! -r "${input}" ]]; then
	echo "Cannot read ${input}" 2>&1
	return 1
    fi

    if [[ -z "${output}" ]]; then
	if tmp_output=$(cache_at_home  "${input}"); then
	    output=${tmp_output}
	    mkdir -p $(dirname "${output}")
	    use_cache=1
	fi
    elif [[ "${output}" = "-" ]]; then
	output=/dev/stdout
    fi
	
    if [[ -n "$debug" ]]; then
	debug="${output}"
    fi

    if [[ -z "${use_cache}" ]] \
	|| [[ ! -e "${output}"  ]] \
	|| [[ -n "$debug"       ]] \
	|| [[ -n "$rebuild_cache" ]] \
	|| ( [[ -n "${use_cache}" ]] && [[ "${input}" -nt "${output}" ]] ); then
        echo '(callp-begin :version 0 :input "'"${input}"'" :date "'$(date)'")' \
	    > ${output}
	run "$debug" es-src-readelf-so "${input}" \
	    >> "${output}"
	run "$debug" es-src-objdump-dcall "${input}"			\
	    | run "$debug" es-filter-objcopy-data "${input}"		\
	    | run "$debug" es-filter-readelf-rela "${input}"		\
	    | run "$debug" es-filter-libdwarves-fileline "${input}"     \
	    >> "${output}"
	run "$debug" es-src-libdwarves "${input}" >> "${output}"
        echo '(callp-end :date "'$(date)'")' >> ${output}
    else 
	:
    fi
    
    if [[ -z "${quiet}" ]]; then
       echo "${output}"
    fi
    return 0
}

main "$@"
exit $?

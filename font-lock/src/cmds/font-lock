#!/bin/sh
#| -*- scheme -*- |#
:; exec gosh -- $0 "$@"

(use font-lock.flclient)
(use font-lock.flserver)
(use font-lock.harness)

(use font-lock.harnesses.daemonize)
(use font-lock.harnesses.screen)
(use font-lock.harnesses.xvnc)


(use gauche.parseopt)
(use file.util)
(use srfi-1)


(define commands (make-hash-table 'eq?))
(define-class <command> ()
  ((proc :init-keyword :proc)
   (doc  :init-keyword :doc)
   (require-connection? :init-keyword :require-connection?)))

(define (show-help-1 key)
  (let1 cmd (ref commands key)
      (format #t 
	      (if (ref cmd 'require-connection?) 
		  "	~a [--socket-name=NAME] [--emacsclient=EMACSCLIENT] [--verbose] [--timeout=SEC] [--harness=HARNESS] [--emacs=EMACS] [--load-path=LOAD-PATH] [--config-file=CONFIG-FILE] ~a ~a\n"
		  "	~a ~a ~a\n")
	      *program-name*
	      key
	      (ref cmd 'doc))))

(define (show-help n)
  (format #t "Usage: \n")
  (format #t "	~a --help|-h\n" *program-name*)
  (for-each
   show-help-1
   (sort (hash-table-keys commands)
	 (lambda (a b)
	   (string<? (x->string a)
		     (x->string b)))))
  (exit n))


(define-macro (define-command cmd params-spec doc require-connection? . body)
  (let1 sym (gensym)
    `(let ((,sym (lambda ,params-spec . ,body)))
       (set! (ref commands ',cmd)
	     (make <command> 
	       :proc ,sym
	       :doc ,doc
	       :require-connection? ,require-connection?)))))

(define-command help (emacsclient socket-name verbose timeout args)
  "" #f
  (show-help 0))

(define-command shutdown (emacsclient socket-name verbose timeout args)
  "" #t
  (flclient-shutdown :emacsclient emacsclient
		     :socket-name socket-name
		     :verbose verbose
		     :timeout timeout))

(define-command ping (emacsclient socket-name verbose timeout args)
  "" #t
  (flclient-ping :emacsclient emacsclient
		 :socket-name socket-name
		 :verbose verbose
		 :timeout timeout))

(define-command cssize (emacsclient socket-name verbose timeout args)
  "FACE CSS-DIR [REQUIRES...]" #t
  (unless (>= (length args) 2)
    (with-output-to-port (current-error-port)
      (lambda () 
	(print "Wrong number of arguments")
	(show-help 1))))
  (let ((face (string->symbol (ref args 0)))
	(css-dir (ref args 1))
	(requires (map string->symbol (list-tail args 2))))
    (let1 status (flclient-cssize face css-dir requires 
				  :emacsclient emacsclient
				  :socket-name socket-name
				  :verbose verbose
				  :timeout timeout)
      (exit status))))

(define-command scssize (emacsclient socket-name verbose timeout args)
  "FACE CSS-DIR [REQUIRES...]" #t
  (unless (>= (length args) 2)
    (with-output-to-port (current-error-port)
      (lambda () 
	(print "Wrong number of arguments")
	(show-help 1))))
  (let ((face (string->symbol (ref args 0)))
	(css-dir (ref args 1))
	(requires (map string->symbol (list-tail args 2))))
    (let1 status (flclient-scssize face css-dir requires 
				   :emacsclient emacsclient
				   :socket-name socket-name
				   :verbose verbose
				   :timeout timeout)
      (exit status))))

(define (convert-common proc emacsclient socket-name verbose timeout args)
  (unless (eq? (length args) 3)
    (with-output-to-port (current-error-port)
      (lambda () 
	(print "Wrong number of arguments")
	(show-help 1))))
  
  (let ((src-file (ref args 0))
	(html-file (ref args 1))
	(css-dir (ref args 2)))
    (unless (file-is-readable? src-file)
      (format (current-error-port) "Cannot read: ~a\n" src-file)
      (exit 1))
    (guard (e
	    ((else 
	      (format (current-error-port) "Cannnot create html file: ~a\n" html-file)
	      (exit 1))))
      (touch-file html-file))
    (guard (e
	    ((else
	      (format (current-error-port) "Cannnot create directory: ~a\n" css-dir)
	      (exit 1))))
      (make-directory* css-dir))
    (let1 status (proc src-file html-file css-dir
		       :emacsclient emacsclient
		       :socket-name socket-name
		       :verbose verbose
		       :timeout timeout)
      
      (exit status))))

(define-command xhtmlize (emacsclient socket-name verbose timeout args)
  "SRC_FILE XHTML_FILE CSS_DIR" #t
  (convert-common flclient-xhtmlize emacsclient socket-name verbose timeout args))

(define-command shtmlize (emacsclient socket-name verbose timeout args)
  "SRC_FILE SHTML_FILE CSS_DIR" #t
  (convert-common flclient-shtmlize emacsclient socket-name verbose timeout args))

(define (invoke command timeout client-args server-args)
  (define (invoke-client cmd)
    (apply (ref cmd 'proc) client-args))
  (define (invoke-server)
    (let ((cmdline (emacs-cmdline (get-keyword :emacs server-args #f)
				  (get-keyword :load-path server-args #f)
				  (get-keyword :config-file server-args #f)))
	  (harness-object (choose-harness (get-keyword :harness server-args))))
      (launch harness-object cmdline (list) (get-keyword :verbose server-args))
      ))
  (define (ping)
    (if (eq? (invoke-client (ref commands 'ping)) 0) 
	#t
	#f))
  (cond
   ((eq? command 'ping)
    (ping))
   ((ref command 'require-connection?)
    (let ((pong (ping)))
      (unless pong
	(invoke-server)
	)
      ;; TODO: 20?
      (let loop ((timeout (or timeout 20))
		 (pong (or pong (ping))))
	(cond
	 (pong
	  (invoke-client command))
	 ((eq? timeout 0)
	  (print "Cannot launch flserver\n" (current-error-port))
	  1)
	 (else
	  (sys-sleep 1)
	  (loop (- timeout 1) (ping)))))))
   (else
    (invoke-client command))))

(define (main args)
  (let-args (cdr args)
      ((help "h|help" => (cute show-help 0))
       (emacsclient "emacsclient=s"  "emacsclient")
       (socket-name "socket-name=s"  "flserver")
       (verbose "verbose" #f)
       (timeout "timeout=i" #f)
       (harness "harness=s" "xvnc")
       (emacs "emacs=s" "emacs")
       (load-path "load-path=s" #f)
       (config-file "config-file=s" #f)
       . rest)
    (when (eq? (length rest) 0)
      (with-output-to-port (current-error-port)
	(lambda () 
	  (print "Wrong number of arguments")
	  (show-help 1))))
    (let ((cmd (string->symbol (car rest)))
	  (rest (cdr rest)))
      (let1 command (ref commands cmd #f)
	(if command
	    (invoke command timeout
		    (list emacsclient socket-name verbose timeout rest)
		    `(:harness ,harness :verbose ,verbose :emacs ,emacs :load-path ,load-path :config-file ,config-file))
	    (with-output-to-port (current-error-port)
	      (lambda ()
		(format #t "No such command: ~s\n" cmd) 
		(show-help 1))))))))
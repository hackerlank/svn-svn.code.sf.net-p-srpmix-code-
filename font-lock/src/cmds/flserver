#!/bin/sh
#| -*- scheme -*- |#
:; exec gosh -- $0 "$@"

(use gauche.parseopt)
(use gauche.process)
(use file.util)


(define (show-help n)
  (format #t "Usage: \n")
  (format #t "	~a --help|-h\n" *program-name*)
  (format #t "	~a [--verbose] [--emacs=EMACS] [--load-path=PATH] [--config-file=CONFIG_EL|--config=CONFIG]\n")
  (exit n)
  )

(define (emacs-cmdline emacs load-path config-file)
  `(,emacs
    "-Q"
    ,@(if load-path `("-L" ,load-path) (list))
    "-l" "flserver-boot"
    "-l" "flserver-decl"
    ,@(if config-file `("-l" ,config-file) (list))
    "-l" "flserver-main"))

(define (main args)
  (let-args (cdr args)
      ((help "h|help" => (cute show-help 0))
       (load-path "load-path=s" #f)
       (emacs "emacs=s" "emacs")
       (config-file "config-file=s" #f)
       (config "config=s" #f)
       (verbose "verbose" #f)
       . rest)
    (unless (null? rest)
      (display "Too many arguments\n" (current-error-port))
      (with-output-to-pprt
       (pa$ show-help 1)))
    (when (and config-file config)
      (display "Specify only --config-file or --config\n" 
	       (current-error-port))
      (with-output-to-port
       (pa$ show-help 1)))
    (let1 config-file (if config-file
			  config-file
			  ;; TODO: handle in *.in
			  (if config
			      (let1 config-file (build-path "/etc/font-lock/flserver" 
							    (string-append config ".el"))
				(unless (file-is-readable? config-file)
				  (format (current-error-port)
					  "Cannot read: ~a\n" config-file))
				config-file)
			      #f))
      ;; TODO: ping?
      ;; TODO: harness?
      (let* ((cmdline (emacs-cmdline emacs load-path config-file))
	     (proc (run-process cmdline :wait #f :error (if verbose #f "/dev/null"))))
	(process-wait proc)
	(exit (process-exit-status proc))))))


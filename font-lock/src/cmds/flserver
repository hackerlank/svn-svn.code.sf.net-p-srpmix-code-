#!/bin/sh
#| -*- scheme -*- |#
:; exec gosh -- $0 "$@"

(use gauche.parseopt)
(use file.util)
(use font-lock.flserver)
(use font-lock.harness)

(use font-lock.harnesses.foreground)
(use font-lock.harnesses.direct)
(use font-lock.harnesses.screen)
(use font-lock.harnesses.xvnc)

(define (show-help n)
  (format #t "Usage: \n")
  (format #t "	~a --help|-h\n" *program-name*)
  (format #t "	~a [--verbose] [--emacs=EMACS] [--load-path=PATH] [--config-file=CONFIG_EL|--config=CONFIG] [--harness=HARNESS]\n" *program-name*)
  (format #t "HARNESS: \n")
  (for-each 
   (lambda (harness) (format #t "	~a\n" (name-of harness)))
   (all-harnesses))
  (exit n)
  )

(define (main args)
  (let-args (cdr args)
      ((help "h|help" => (cute show-help 0))
       (load-path "load-path=s" #f)
       (emacs "emacs=s" "emacs")
       (config-file "config-file=s" #f)
       (config "config=s" #f)
       (verbose "verbose" #f)
       (harness "harness=s" "direct")
       . rest)
    (unless (null? rest)
      (display "Too many arguments\n" (current-error-port))
      (with-output-to-port (current-error-port)
       (pa$ show-help 1)))
    (when (and config-file config)
      (display "Specify only --config-file or --config\n" 
	       (current-error-port))
      (with-output-to-port (current-error-port)
       (pa$ show-help 1)))
    (let1 config-file (if config-file
			  config-file
			  (if config
			      (let1 config-file (config->config-file config)
				(unless config-file
				  (format (current-error-port)
					  "Cannot read: ~a\n" config-file))
				config-file)
			      #f))
      (let* ((cmdline (emacs-cmdline emacs load-path config-file))
	     (harness-object (choose-harness harness)))
	(unless harness-object
	  (format (current-error-port)
		  "No such hanress: ~a" hanress)
	  (exit 1))
	(exit (launch harness-object cmdline verbose #f))))))


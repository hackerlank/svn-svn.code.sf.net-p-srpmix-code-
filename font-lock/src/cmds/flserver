#!/bin/sh
#| -*- scheme -*- |#
:; exec gosh -- $0 "$@"

(use gauche.parseopt)
(define (show-help n)
  (format #t "Usage: \n")
  (format #t "	~a --help|-h\n" *program-name*)
  (format #t "	~a [--emacs=EMACS] [--load-path=PATH] [CONFIG_EL|@CONFIG_EL]\n")
  (exit n)
  )
(define (main args)
  (let-args (cdr args)
      ((help "h|help" => (cute show-help 0))
       (load-path "load-path=s" #f)
       (emacs "emacs=s" "emacs")
       . rest)
    (invoke-emacs emacs load-path ...)))


emacs=emacs
load_path=
config_el=

function print_usage
{
    echo "Usage: "
    echo "  flserver --help|-h"
    echo "  flserver [--load-path=PATH] [--emacs=EMACS] [config_el]"
    echo
}
function parse_arugments
{
    while [ $# -gt 0 ]; do
	case "$1" in
	    --help|-h)
		print_usage
		exit 0
		;;
	    (--load-path=*)
		load_path="-L ${1/--load-path=}"
		;;
	    (--emacs=*)
		emacs="${1/--emacs=}"
		;;
	    (--*)
		echo "No such option: $1" 1>&2
		print_usage 1>&2
		exit 1
		;;
	    (*)
		break;
		;;
	esac
	shift
    done
    
    if [ $# = 0 ]; then
	:			# do nothing
    elif [ $# = 1 ]; then
	config_el="-l $1"
	shift
    else
	print_usage 1>&2
	exit 1
    fi
}

function main
{
    parse_arugments "$@"
    $emacs -Q $load_path -l flserver-boot -l flserver-decl $config_el -l flserver-main
}

main "$@"

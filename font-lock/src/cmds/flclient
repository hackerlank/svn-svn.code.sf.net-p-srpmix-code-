#!/bin/sh
#| -*- scheme -*- |#
:; exec gosh -- $0 "$@"

(use font-lock.flclient)
(use gauche.parseopt)
(use file.util)
(use srfi-1)

(define commands (make-hash-table 'eq?))
(define-class <command> ()
  ((proc :init-keyword :proc)
   (doc  :init-keyword :doc)
   (require-connection? :init-keyword :require-connection?)))

(define (show-help-1 prog key)
  (let1 cmd (ref commands key)
      (format #t 
	      (if (ref cmd 'require-connection?) 
		  "	~a [--socket-name=NAME] [--emacsclient=EMACSCLIENT] [--verbose] [--timeout=SEC] [--harness=HARNESS] ~a ~a\n"
		  "	~a ~a ~a\n")
	      prog
	      key
	      (ref cmd 'doc))))

(define (show-help prog n)
  (format #t "Usage: \n")
  (format #t "	~a --help|-h\n" prog)
  (for-each
   (pa$ show-help-1 prog)
   (sort (hash-table-keys commands)
	 (lambda (a b)
	   (string<? (x->string a)
		     (x->string b)))))
  (exit n))


(define-macro (define-command cmd params-spec doc require-connection? . body)
  (let1 sym (gensym)
    `(let ((,sym (lambda ,params-spec . ,body)))
       (set! (ref commands ',cmd)
	     (make <command> 
	       :proc ,sym
	       :doc ,doc
	       :require-connection? ,require-connection?)))))

(define-command help (prog emacsclient socket-name verbose timeout args)
  "" #f
  (show-help prog 0))

(define-command shutdown (prog emacsclient socket-name verbose timeout args)
  "" #t
  (flclient-shutdown :emacsclient emacsclient
		     :socket-name socket-name
		     :verbose verbose
		     :timeout timeout))

(define-command ping (prog emacsclient socket-name verbose timeout args)
  "" #t
  (flclient-ping :emacsclient emacsclient
		 :socket-name socket-name
		 :verbose verbose
		 :timeout timeout))

(define-command cssize (prog emacsclient socket-name verbose timeout args)
  "FACE CSS-DIR [REQUIRES...]" #t
  (unless (eq? (length args) 3)
    (with-output-to-port (current-error-port)
      (lambda () 
	(print "Wrong number of arguments")
	(show-help prog 1))))
  (let ((face (string->symbol (ref args 0)))
	(css-dir (ref args 1))
	(requires (map string->symbol (list-tail args 2))))
    (let1 status (flclient-cssize face css-dir requires 
				  :emacsclient emacsclient
				  :socket-name socket-name
				  :verbose verbose
				  :timeout timeout)
      (exit status))))

(define (convert-common proc prog emacsclient socket-name verbose timeout args)
  (unless (eq? (length args) 3)
    (with-output-to-port (current-error-port)
      (lambda () 
	(print "Wrong number of arguments")
	(show-help prog 1))))
  
  (let ((src-file (ref args 0))
	(html-file (ref args 1))
	(css-dir (ref args 2)))
    (unless (file-is-readable? src-file)
      (format (current-error-port) "Cannot read: ~a\n" src-file)
      (exit 1))
    (guard (e
	    ((else 
	      (format (current-error-port) "Cannnot create html file: ~a\n" html-file)
	      (exit 1))))
      (touch-file html-file))
    (guard (e
	    ((else
	      (format (current-error-port) "Cannnot create directory: ~a\n" css-dir)
	      (exit 1))))
      (make-directory* css-dir))
    (let1 status (proc src-file html-file css-dir
		       :emacsclient emacsclient
		       :socket-name socket-name
		       :verbose verbose
		       :timeout timeout)
      
      (exit status))))

(define-command xhtmlize (prog emacsclient socket-name verbose timeout args)
  "SRC_FILE XHTML_FILE CSS_DIR" #t
  (convert-common flclient-xhtmlize prog emacsclient socket-name verbose timeout args))

(define-command shtmlize (prog emacsclient socket-name verbose timeout args)
  "SRC_FILE SHTML_FILE CSS_DIR" #t
  (convert-common flclient-shtmlize prog emacsclient socket-name verbose timeout args))



(define (invoke command client-args server-args)
  (define (invoke-client cmd)
    (apply (ref cmd 'proc) client-args))
  (define (ping)
    (if (eq? (invoke-client (ref commands 'ping)) 0) 
	#t
	#f))
  (when (ref command 'require-connection?)
    (unless (ping)
      ;; ;; lauch flserver under harness
    ))
  (invoke-client command))

		



(define (main args)
  (let ((prog (car args))
	(args (cdr args)))
    (let-args args
	((help "h|help" => (cute show-help prog 0))
	 (emacsclient "emacsclient=s"  "emacsclient")
	 (socket-name "socket-name=s"  "flserver")
	 (verbose "verbose" #f)
	 (timeout "timeout=i" #f)
	 . rest)
      (when (eq? (length rest) 0)
	(with-output-to-port (current-error-port)
	  (lambda () 
	    (print "Wrong number of arguments")
	    (show-help prog 1))))
      (let ((cmd (string->symbol (car rest)))
	    (rest (cdr rest)))
	(let1 command (ref commands cmd #f)
	  (if command
	      (invoke command 
		      (list prog emacsclient socket-name verbose timeout rest)
		      (list))
	      (with-output-to-port (current-error-port)
		(lambda ()
		  (format #t "No such command: ~s\n" cmd) 
		  (show-help prog 1)))))))))
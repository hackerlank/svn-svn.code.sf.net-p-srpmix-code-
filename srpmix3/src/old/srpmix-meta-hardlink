#!/usr/bin/guile \
-e main -s
;; -*- scheme -*-
!#
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; srpmix:-meta-hardlink Generate a script running hardlink in srpmix directories
;;
;; Copyright (C) 2007 Masatake YAMATO
;;
;; Author: Masatake YAMATO <yamato@redhat.com>
;;
;; program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation; either version 3 of the License, or
;; (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;; Description:
;; Consider source files of each updates of distributions are deployed
;; at /srv/sources/src-deployed/.
;; I expect many source files are not changed between updates. If it is
;; true, we can save much disk space with using hardlink command.
;;
;; This script reads es log files generated by srpmix command and 
;; generate a shell script which runs hardlink between updates.
;; More precisely, hardlink run not between updates but packages.
;; I hope running hardlink between packages are much faster than
;; between updates.

;;; Usage:
;;
;; $ ./srpmix-meta-hardlink /srv/sources/src-deployed/* > /tmp/hardlink.sh
;; $ /tmp/hardlink.sh
;;

;;
;; es log example:
;; (map :srpm-name "FreeWnn-1.10pl020-5" 
;;      :spec-name "FreeWnn" 
;;      :xspec-file "FreeWnn-1.10pl020-5.spec" 
;;      :build-name "FreeWnn-1.10pl020-5" )
;;
(define (main args)
  (generate-shell-script 
   (let ((table  (make-hash-table)))
     (map (lambda (dir) 
	    (with-input-from-file (string-append dir "/srpmix-LOG/srpmix-log.es")
	      (lambda ()
		(fill-table table (read) dir))))
	  (cdr args))
     table)))

(define (generate-shell-script table)
  (display "#!/bin/sh\n")
  (hash-for-each (lambda (key value)
		   (display (string-append "echo -n hardlinking " key "..." "\n\n"))
		   (display "/usr/sbin/hardlink -c \\\n")
		   (for-each (lambda (v) (display "	") (write v) (display " \\\n")) value)
		   (display "\n")
		   (display "echo done\n\n\n\n")) 
		 table))

(define (klist-get list key default-if-not-found)
  (cond
   ((null? list) default-if-not-found)
   ((eq? (car list) key) (cadr list))
   (else (klist-get (cdr (cdr list)) key default-if-not-found))))

(define (fill-table-1 table elt dir)
  (let* ((klist elt)
	 (spec (klist-get klist ':spec-name #f))
	 ;;
	 (build (string-append 
		 dir
		 "/srpmix-BUILD/"
		 (klist-get klist ':build-name #f)))
	 (vanilla (string-append 
		   dir
		   "/srpmix-VANILLA/"
		   (klist-get klist ':build-name #f)))
	 (sources (string-append 
		   dir
		   "/srpmix-SOURCES/"
		   (klist-get klist ':build-name #f)))
	 ;;
	 (val  (hash-ref table spec #f)))
    ;; TODO: compat hack should be here.
    (hash-set! table spec
	       (if val
		   (cons sources (cons vanilla (cons build val)))
		   (list sources vanilla build)))))

(define (fill-table table elt dir)
  (cond 
   ((eof-object? elt) #f)
   ((eq? (car elt) 'map)
    (fill-table-1 table (cdr elt) dir)
    (fill-table table (read) dir))
   (else
    (fill-table table (read) dir))))

;; srpmix-meta-hardlink ends here.

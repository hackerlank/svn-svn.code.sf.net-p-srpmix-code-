#!/bin/sh
#| -*- scheme -*- |#
:; exec gosh -- $0 "$@"

;; Copyright (C) 2010 Masatake YAMATO

;; This library is free software: you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This library is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this library.  If not, see <http://www.gnu.org/licenses/>.
;;
;; Author: Masatake YAMATO <yamato@redhat.com>
;;
(use www.cgi)
(use text.html-lite)
(use gauche.process)
(use file.util)
(use mperg->html)
(use srfi-1)


(define srcview "@SRCVIEW@")
(define preview "@PREVIEW@")
;; TODO
(define logdir  "/var/log/webperg/@WWWNAME@")

(define max-groups 5)
(define max-log-lines 30)
(define max-log-columns 250)
(define archs (list "x86_64" "i686" "vanilla"))

(define (cover-page)
  (list
   (html-doctype)
   (html:html
    (html:head (html:title "webperg"))
    (html:div "Choose a distribution and paste your /var/log/messages")
    (html:body (html:form
		(html:p (list (html:select :name "dist" :size 1
					   (map
					    (pa$ html:option)
					    (enumerate-dists)))
			      (html:select :name "arch" :size 1
					   (map (pa$ html:option)
						archs))
			      ))
		(html:p (html:textarea :rows 10 :cols 128 :name "syslog"))
		(html:p (list (html:input :type "submit" :name "submit" :value "Locate them")))
		(html:p (list 
			 (format "max groups: ~a, max log lines: ~a, max log columns: ~a, "
				 max-groups max-log-lines max-log-columns)
			 (html:input :type "checkbox" :name "debug" :value "#t") "debug"))
		)))))

(define (enumerate-dists)
  (reverse (directory-list "/srv/sources/dists" 
			   :children? #t 
			   :filter #/rhel[0-9].*/)))


(define (prepare syslog p)
  (for-each
   (lambda (line)
     (display (if (> (string-length line) max-log-columns)
		  (substring line 0 max-log-columns)
		  line)
		p)
       (newline p))
   (let1 syslog-lines (string-split syslog #\newline)
     (if (> (length syslog-lines) max-log-lines)
	 (take syslog-lines max-log-lines)
	 syslog-lines))))

(define (result-page dist arch syslog srcview preview logdir debug)
  (let1 mperg (run-process `(mperg 
			     "--dist" ,dist
			     ,(format "--max-groups=~a" max-groups))
			   :input :pipe
			   :output :pipe)
    (let* ((start (sys-time))
	   (logp (and logdir 
		      (open-output-file (build-path 
					 logdir 
					 (format "~a-~a" start (sys-getpid)))
					:if-does-not-exist :create
					:buffering :none
					))))
      (and logp (begin (write `(start ,start 
				      :dist ,dist
				      :arch ,arch
				      :debug ,debug
				      :metavariables ,(cgi-metavariables))
			      logp) 
		       (newline logp)))
      (and logp (begin (write `(input ,syslog) logp) (newline logp)))
      (let1 p (process-input mperg)
	(prepare syslog p)
	(close-output-port p))
      (let1 p (process-output mperg)
	(let1 html (if debug 
		       (html:pre (html-escape-string (port->string p)))
		       (mperg->html p dist (delete arch archs) srcview preview))
	  (close-input-port p)
	  (process-wait mperg)
	  (and logp (begin (write `(result ,html) logp) (newline logp)))
	  (and logp (let1 end (sys-time)
		      (write `(end ,end) logp) (newline logp)
		      (write `(delta ,(- end start)) logp) (newline logp)
		      ))
	  html)))))



(cgi-main
 (lambda (params)
   (let ((dist (or (cgi-get-parameter "dist" params :convert x->string) "rhel5su4"))
	 (arch (or (cgi-get-parameter "arch" params :convert x->string) "x86_64"))
	 (syslog (cgi-get-parameter "syslog" params :convert x->string))
	 (logdir (if (file-is-directory? logdir) logdir #f))
	 (debug  (cgi-get-parameter "debug" params)))
     (list
      (cgi-header)
      (if syslog
	  (result-page dist arch syslog srcview preview logdir debug)
	  (cover-page)
	 )))))
;; -*- scheme -*-
(use trapeagle.pp-common)
(use trapeagle.graft)
(use trapeagle.stripper)
(use trapeagle.serialize)

(use gauche.parseopt)
(use file.util)
(use file.filter)


;(define read$ (pa$ read (make <grafter> :input-port (make <serializer>))))
(define read$ 
  (pa$ 
   read
   (make <grafter>
     :input-port (make <stripper> 
		   :rules '(
			    (* * :args)
			    (* read :xargs 1)
			    (* read :args)
			    ;;(resumed read :args)
			    ;;(* futex :args)
			    ;;(resumed futex :args)
			    ;;(* clock_gettime :args)
			    ;;(resumed clock_gettime :args)
			    ;;(* write :args)
			    (* write :xargs 1)
			    (* write :args)
			    ;;(resumed write :args)
			    )
		   :input-port (make <serializer> :debug #t)))))

(let loop ((r (read$)))
  (unless (eof-object? r)
    (write r)
    (newline)
    (loop (read$))))

(define (show-help prog n)
  (format #t "~a --help\n" prog)
  (format #t "~a [--debug]\n" prog)
  (exit n))

(define (main args)
  (let-args (cdr args)
      ((help "h|help" => (cute show-help (car args) 0))
       (debug "debug")
       )
    (file-filter serialize+strip :output "serialize+strip.es" 
		 :temporary-file "tmp-serialize+strip.es")
    (file-filter :input "serialize+strip.es"
		 :output "graft-map.es")
    (let1 grafted-port (graft-port (open-input-file "graft-map.es")

      ))

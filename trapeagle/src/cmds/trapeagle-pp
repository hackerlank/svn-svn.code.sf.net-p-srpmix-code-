;; -*- scheme -*-
(use trapeagle.pp-common)
(use trapeagle.graft)
(use trapeagle.filter)
(use trapeagle.serialize)

;(define read$ (pa$ read (make <grafter> :input-port (make <serializer>))))
(define read$ (pa$ read (make <filter> 
			  :rules '(
				   (* read :args)
				   ;(resumed read :args)
				   (* futex :args)
				   ;(resumed futex :args)
				   (* clock_gettime :args)
				   ;(resumed clock_gettime :args)
				   (* write :args)
				   ;(resumed write :args)
				  )
			  :input-port (make <serializer>))))

(let loop ((r (read$)))
  (unless (eof-object? r)
    (write r)
    (newline)
    (loop (read$))))

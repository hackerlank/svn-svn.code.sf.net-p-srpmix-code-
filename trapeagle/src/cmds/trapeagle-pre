;; -*- scheme -*-
(use trapeagle.pre-common)
(use trapeagle.pre.graft)
(use trapeagle.pre.stripper)
(use trapeagle.pre.serialize)

(use gauche.parseopt)
(use gauche.vport)
(use file.util)
(use file.filter)
(use srfi-11)

(define-class <graft-input-port> (<virtual-input-port>)
  ((ports :init-keyword :ports :init-form (list))
   (current-input-port :allocation :virtual
		       :slot-ref (lambda (self)
				   (let1 head (ref self 'ports)
				     (if (null? head)
					 #f
					 (car head)))))))

(define (shift-iports! self)
  (if (null? (ref self 'ports))
      #f
      (update! (ref self 'ports) 
	       (lambda (ports) (cdr ports)))))

(define (getb self)
  (let1 iport (ref self 'current-input-port)
    (if iport 
	(let1 b (read-byte iport)
	  (if (eof-object? b)
	      (begin (shift-iports! self)
		     (getb self))
	      b))
	(eof-object))))

(define (ready self char-ready??)
  (let1 checker (if char-ready?? char-ready? byte-ready?)
    (let1 iport (ref self 'current-input-port)
      (if iport 
	  (let1 b (checker iport)
	    (if b
		b
		(begin (shift-iports! self)
		       (ready self char-ready??))))
	  #f))))

(define-method initialize ((self <graft-input-port>) initargs)
  (next-method)
  (set! (ref self 'getb) 
	(pa$ getb self))
  (set! (ref self 'ready) 
	(pa$ ready self)))

;(define read$ (pa$ read (make <grafter> :input-port (make <serializer>))))
(define read$ 
  (pa$ 
   read
   (make <grafter>
     :input-port (make <stripper> 
		   :rules '(
			    (* * :args)
			    (* read :xargs 1)
			    (* read :args)
			    (* write :xargs 1)
			    (* write :args)
			    )
		   :input-port (make <serializer> :debug #t)))))

(define (show-help prog n)
  (format #t "~a --help\n" prog)
  (format #t "~a [--debug]\n" prog)
  (exit n))

(define (serialize+strip iport oport debug)
  (let1 iport (make <stripper> 
		:rules '(
			 (* * :args)
			 (* read :xargs 1)
			 (* read :args)
			 (* write :xargs 1)
			 (* write :args)
			 )
		:input-port (make <serializer> 
			      :input-port iport
			      :debug debug))
    (let loop ((r (read iport)))
      (unless (eof-object? r)
	(write r oport)
	(newline oport)
	(loop (read iport))))))

(define (writeln o oport)
  (write o oport)
  (newline oport))
 
;; (trapeagle-pre graft-map n0 n1)
(define (make-graft-map iport oport debug)
  (let1 proc-table (make-hash-table 'eq?)
    (let loop ((r (read iport)))
      (unless (eof-object? r)
	(when (eq? (car r) 'strace)
	  (when debug
	    (format (current-error-port) ";; <graft-map> ~d\n" (cadr (memq :index r))))
	  (case (cadr r)
	    ('unfinished
	     (let ((pid (cadr (memq :pid r))))
	       (if (ref proc-table pid #f)
		   (errorf "duplicated unsolved unfinished pair for ~d\nold: ~s\nnew: ~s\n"
			   pid (ref proc-table pid) r)
		   (hash-table-put! proc-table pid r))))
	    ('resumed
	     (let* ((pid (cadr (memq :pid r)))
		    (unfinished (ref proc-table pid #f))
		    (xargs (cadr (memq :xargs r)))
		    (xrvalue (cadr (memq :xrvalue r)))
		    (xerrno (cadr (memq :xerrno r))))
	       (if unfinished
		   (begin 
		     (set! (ref proc-table pid) #f)
		     (writeln `(trapeagle-pre graft-map
					     ,(cadr (memq :index unfinished))
					     ,(cadr (memq :index r))
					     :xargs ,xargs
					     :xrvalue ,xrvalue
					     :xerrno ,xerrno
					     )
			      oport)
		     )
		   (errorf "Unblanced unfinished/resumed pair for ~d\nresumed: ~s\n" pid r)
		   )))))
	(loop (read iport))))
    (hash-table-map proc-table (lambda (pid unfinished)
				 (when unfinished
				   (writeln `(trapeagle-pre graft-map
							   ,(cadr (memq :index unfinished))
							   #f
							   :xargs #f
							   :xrvalue #f
							   :xerrno #f
							   )
					    oport))))))

(define (apply-map iport oport)
  (let1 unfinished/resumed (make-hash-table 'eq?)
    (let loop ((r (read iport)))
      (unless (eof-object? r)
	(case (car r)
	  ('trapeagle-pre
	   (when (eq? (cadr r) 'graft-map)
	     (set! (ref unfinished/resumed (caddr r)) 
		   (cdddr r))
	     (when (cadddr r)
	       (set! (ref unfinished/resumed (cadddr r)) (caddr r)))))
	  ('strace
	   (case (cadr r)
	     ('unfinished
	      (let1 index (cadr (memq :index r))
		(write (append r (cons :resumed? (ref unfinished/resumed index))) oport)
		(newline oport)))
	     ('resumed
	      (let1 index (cadr (memq :index r))
		(write (append r (list :unfinished? (ref unfinished/resumed index))) oport)
		(newline oport)))
	     (else
	      (write r oport)
	      (newline oport)))))
	(loop (read iport))))))

;; output input name
(define (make-temporary-io template debug)
  (if debug
      (let1 name (format "/tmp/~s" template)
	(let1 o (open-output-file name)
	  (let1 i (open-input-file name)
	    (values o i name))))
      (receive (o name) (sys-mkstemp (build-path (temporary-directory) template))
	(let1 i (open-input-file name)
	  (values o i name)))))


(define (main args)
  (let-args (cdr args)
      ((help "h|help" => (cute show-help (car args) 0))
       (debug "debug" #f))
    (let-values (((>strip <strip strip-name) (make-temporary-io 
					      "serialize+strip.es"
					      debug)))
      (serialize+strip (current-input-port) >strip debug)
      (close-output-port >strip)
      (let-values (((>graft-map <graft-map graft-map-name) (make-temporary-io 
							    "graft-map.es"
							    debug)))
	(make-graft-map <strip >graft-map debug)
	(port-seek <strip 0 SEEK_SET)
	(close-output-port >graft-map)
	(let1 i (make <graft-input-port>
		  :ports (list
			  <graft-map
			  <strip))
	  (apply-map i (current-output-port))
	  0)))))

#!/bin/sh
#| -*- scheme -*- |#
:; exec gosh -- $0 "$@"
(use trapeagle.linux)
(use trapeagle.syscalls.fd)
(use trapeagle.syscalls.task)
(use trapeagle.control)
(use gauche.parseopt)
(use util.match)

(define (show-help prog n)
  (format #t "~a --help\n" prog)
  (format #t "~a [--debug]\n" prog)
  (exit n))

(defcontrol report (kernel . args) (report kernel args))

(define (split-by pred lst)
  (let loop ((input   lst)
	     (pre (list))
	     (post  (list))
	     (found? #f))
    (if (null? input)
	(values (reverse pre) (reverse post))
	(if (pred (car input))
	    (loop (cdr input) pre post #t)
	    (if found?
		(loop (cdr input) pre (cons (car input) post) found?) 
		(loop (cdr input) (cons (car input) pre) post found?))))))

(define (read-list lst)
  (map read (map open-input-string lst)))

(define (main args)
  (define (consume-one k r)
    (cond 
     ((eq? (car r) 'strace)
      (syscall k (cdr r)))
     ((eq? (car r)  'trapeagle)
      (control k (cadr r) (cddr r)))))
  (let-args (cdr args)
      ((help "h|help" => (cute show-help (car args) 0))
       (debug "debug" #t)
       . rest)
    (receive (pre post) (split-by (pa$ equal? "-") rest)
      (let ((kernel (make <linux>))
	    (pre-list (read-list pre))
	    (post-list (read-list post)))
	(for-each (pa$ consume-one kernel) pre-list)
	(let loop ((r (read)))
	  (unless (eof-object? r)
	    (consume-one kernel r)
	    (loop (read))))
	(for-each (pa$ consume-one kernel) post-list)
	))))


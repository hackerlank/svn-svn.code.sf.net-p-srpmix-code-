(define-module syntax.syntax
  (export syntax)
  (use srfi-1)
  (use srfi-11)
  (use srfi-19)
  (use util.list)
  (use sxml.tree-trans)
  (use syntax.htmlprag)
  (use gauche.process))
(select-module syntax.syntax)

;; See /www.ac.cyberhome.ne.jp/~yakahaira/vimdoc/syntax.html

;; replace-range in gauche-0.8.x is broken: let*-values
;; is not imported in sxml.tree-trans.
;; So redefine it here.
(define (replace-range beg-pred end-pred forest)
  (define (loop forest keep? new-forest)
    (if (null? forest) 
	(values (reverse new-forest) keep?)
	(let ((node (car forest))) 
	  (if keep? 
	      (cond 
	       ((beg-pred node) => (lambda (repl-branches) 
				     (loop (cdr forest) 
					   #f
					   (append (reverse repl-branches) new-forest))))
	       ((not (pair? node)) 
		(loop (cdr forest) keep? (cons node new-forest)))
	       (else (let*-values (((node?) (symbol? (car node))) 
				   ((new-kids keep?) (loop (if node? 
							       (cdr node)
							       node) #t '())))
		       (loop (cdr forest) keep? (cons (if node? 
							  (cons (car node) new-kids)
							  new-kids) 
						      new-forest))))) 
	      (cond ((end-pred node) => (lambda (repl-branches)
					  (loop (append repl-branches (cdr forest))
						#t
						new-forest)))
		    ((not (pair? node))
		     (loop (cdr forest) keep? new-forest))
		    (else (let*-values (((node?) (symbol? (car node)))
					((new-kids keep?) (loop (if node? 
								    (cdr node)
								    node) #f '()))) 
			    (loop (cdr forest) 
				  keep? 
				  (if (or keep? (pair? new-kids))
				      (cons (if node?
						(cons (car node) new-kids)
						new-kids) 
					    new-forest)
				      new-forest)))))))))
  (let*-values (((new-forest keep?) (loop forest #t '()))) new-forest))

(define (syntax->font-lock class)
  (let1 mapping '(("lnr" . "linum")
		  ("Comment" . "comment")
		  ;;
		  ("Constant"       . "constant")
		  ("String"         . "string")
		  ("Character"      . "default")
		  ("Number"         . "default") 
		  ("Boolean"        . "default") 
		  ("Float"          . "default") 
		  ;;
		  ("Identifier"     .  "variable-name")
		  ("Function"       .  "function-name")
		  ;;
		  ("Statement"      .  "keyword")
		  ("Conditional"    .  "keyword")
		  ("Repeat"         .  "keyword")
		  ("Label"          .  "keyword")
		  ("Operator"       .  "default")
		  ("Keyword"        .  "keyword")
		  ("Exception"      .  "exception")
		  ;;
		  ("PreProc"        . "preprocessor")
		  ("Include"        . "preprocessor")
		  ("Define"         . "preprocessor")
		  ("Macro"          . "preprocessor")
		  ("PreCondit"      . "preprocessor")
		  ;;
		  ("Type"           . "type")
		  ("StorageClass"   . "keyword")
		  ("Structure"      . "keyword")
		  ("Typedef"        . "keyword")
		  ;;
		  ("Special"        . "warning") ;???
		  ("SpecialChar"    . "warning") ;???
		  ("Tag"            . "default")
		  ("Delimiter"      . "nagation-char")
		  ("SpecialComment" . "doc")
		  ("Debug"          . "default")
		  ;;
		  ("Underline"      . "default") ;???
		  ("Ignore"         . "default") ;???
		  ("Error"          . "warning") ;???
		  ("Todo"           . "doc") ;???
		  )
        (assoc-ref mapping class class)))
;;; http://okmij.org/ftp/Scheme/lib/SXML-tree-trans.scm
(define (built-in-links)
  (define (built-in-link title face)
    `(link (|@| (rel "stylesheet")
	    (type "text/css")
					;(href ,#`"file:///var/lib/yogomacs/local/css/,|face|--,|title|.css")
	    (href ,#`"file:///tmp/,|face|--,|title|.css")
	    (title ,title))))
  (define (built-in-link0 title names)
    (apply
     append
     (map
      (lambda (face)
	(list "	" (built-in-link title face) "\n"))
      names)))
  (let1 base-names '(default
		      font-lock-builtin-face
		      font-lock-comment-delimiter-face
		      font-lock-comment-face
		      font-lock-constant-face
		      font-lock-doc-face
		      font-lock-function-name-face
		      font-lock-keyword-face
		      font-lock-negation-char-face
		      font-lock-regexp-grouping-backslash
		      font-lock-regexp-grouping-construct
		      font-lock-string-face
		      font-lock-type-face
		      font-lock-variable-name-face
		      font-lock-warning-face
		      highlight
		      lfringe
		      linum
		      rfringe)
    `(
      ,@(built-in-link0 "Default" base-names)
      ,@(built-in-link0 "Invert" base-names))))

(define (replacex sxml)
  (replace-range 
   (lambda (b) 
     (or 
      (and-let* (( (pair? b) )
		 ( (eq? (car b) 'span) )
		 ( (list? (ref b 1)) )
		 ( (eq? (car (ref b 1)) '|@|) )
		 (attrs (cdr (ref b 1)))
		 ( (equal? (car (assq-ref attrs 'class '(#f))) "linum"))
		 (text (ref b 2))
		 (id ((#/ *([0-9]+)/ text) 1))
		 (point (car (assq-ref attrs 'point)))
		 )
	`((span (|@| ,@(append (alist-delete 'point attrs eq?)
			       `((id ,#`"L:,|id|"))))
		(a (|@| (href ,#`"#L:,|id|"))
		   ,text))
	  (span (|@| 
		 (class "lfringe")
		 (id    ,#`"l/P:,|point|/L:,|id|"))
		" ")
	  (span (|@| 
		 (class "rfringe")
		 (id    ,#`"r/L:,|id|"))
		" ")))
      #f)
      )
   (lambda (e) `(,e))
   sxml))

(define (trx sxml point-max count-lines)
  (let ((point 0))
    (replacex
     (pre-post-order sxml
		     `((head 
			((meta . ,(lambda (tag attrs . rest)
				    (or 
				     (and-let* (( (list? attrs) )
						( (eq? (car attrs) '|@|) )
						(attrs (cdr attrs))
						( (equal? (car (assq-ref attrs 'name '(#f)))
							  "syntax") )
						(syntax (car (assq-ref attrs 'content '(#f)))))
				       `(,tag (|@| 
					       (name "major-mode")
					       (content ,#`",|syntax|-mode"))))
				     `(,tag ,attrs . ,rest))))) 
			. ,(lambda (tag . rest)
			     (cons tag (append
					(reverse
					 (fold (lambda (kar kdr)
						 (cond
						  ((string? kar)
						   (cons kar kdr))
						  ((eq? (car kar) 'style)
						   kdr)
						  (else
						   (cons kar kdr))))
					       (list)
					       rest))
					(list "	" `(meta (|@| 
							  (name "created-time")
							  (content ,(date->string (time-utc->date (current-time)) "~5"))))
					      "\n"
					      "	" `(meta (|@| 
							  (name "version")
							  (content "0.0.0")))
					      "\n"
					      "	" `(meta (|@| 
							  (name "point-max")
							  (content ,point-max)))
					      "\n"
					      "	" `(meta (|@| 
							  (name "count-lines")
							  (content ,count-lines)))
					      "\n"
					      )
					(built-in-links)
					))))
		       (pre 
			((span
			  ((class *preorder* . ,(lambda (tag str)
						  (list tag (syntax->font-lock str))
						  ))
			   (*text* . ,(lambda (tag str) str))
			   (*default* . ,(lambda x x))
			   ) .
			     ,(lambda (tag attrs . rest)
				(if (and (eq? (car attrs) '|@|)
					 (equal? (car (assq-ref (cdr attrs) 'class '(#f)))
						 "linum"))
				    (let1 linum ((#/( *[0-9]+) / (car rest)) 1)
				      (list tag (append attrs
							`((point ,#`",|point|"))
							)
							linum))
				    (let1 result (cons* tag (append attrs
								    `((id ,#`"P:,|point|"))
								    )
							rest)
				      (set! point (+ point (string-length (car rest))))
				      result
				      ))))
			 (*text* . ,(lambda (tag str) 
				      (set! point (+ point (string-length str)))
				      str))
			 )
			. ,(lambda x x))
		       (*text* . ,(lambda (tag str) str))
		       (*default* . ,(lambda x x))
		       )))))

(define (buffer-info shtml)
  (let ((point-max 0)
	(count-lines "0"))
    (pre-post-order shtml
		    `((span . ,(lambda (tag attrs text)
				 (if (equal? (car (assq-ref (cdr attrs) 'class '(#f))) "lnr")
				     (set! count-lines text)
				     (set! point-max (+ point-max (string-length text)))
				     )
				 (list tag attrs text)
				 ))
		      (pre . ,(lambda (tag . rests)
				(for-each (lambda (elt) 
					    (when (string? elt)
					      (set! point-max (+ point-max (string-length elt)))))
					  rests)
				(cons tag rests)
				))
		      (*text* . ,(lambda (tag str) str))
		      (*default* . ,(lambda x x))))
    (values (x->string point-max) ((#/([0-9]+) / count-lines) 1))))

(define prefix "@prefix@")
(debug-print-width #f)
(define (syntax source-file)
  (receive (port fname) (sys-mkstemp "/tmp/SYNTAX")
    (sys-putenv "SYNTAX_OUTPUT_FILE" fname)
    (let1 proc (run-process
		`(screen
		  -D -m
		  vim -n -u NONE |-i| NONE -N 
		  -S ,#`",|prefix|/share/syntax/syntax-batch.vim" 
		  -- ,source-file)
		:wait #t)
      (let1 status (process-exit-status proc)
	(let1 shtml (call-with-input-file fname html->shtml)
	  (sys-unlink fname)
	  (sys-unsetenv "SYNTAX_OUTPUT_FILE")
	  (let*-values (((point-max count-lines) (buffer-info shtml)))
	    (trx shtml point-max count-lines)))))))

(provide "syntax/syntax")
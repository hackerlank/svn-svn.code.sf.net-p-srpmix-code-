-*- outline -*-
* prioritized task
** css in sexp: http://common-lisp.net/gitweb?p=projects/css-sexp/css-sexp.git;a=blob;f=src/output.lisp;h=93b9cc9f7d2106bbbeed8da247c5388f09807db6;hb=HEAD
** tag-handlers
** mode info

** ChangeLog
** TODO
** README <done>
** pager
** broken chopped page
** gnu source highlighting <done>
** publish and delete yarn

** specify read-only, cache-build... at configure
** char code(latin), See enca package.
** /params
** performance
*** trap style changing
** Running as yum repo
** link to ftp://

** /var/lib/yogomacs/css + /var/cache/yogomacs/css/@SPEC_CONFIG@
** /web -> /_/
** /web -> /es
** reel spins
*** mapping to /annotations/keywords/...
*** mapping to /annotations/spots/...
*** mapping to /annotations/stories/...
*** mapping to /home/yamato/keywords
*** mapping to /home/yamato/spots
*** mapping to /home/yamato/stories

** .. -> /logout at /

** Look at the similarity betwenn dests/yarn.scm, dest/css.scm and dest/keywords.scm.
** use xxx-route of dests/yarn.scm, dest/css.scm and dest/keywords.scm in main.scm.
** /es
** /json
** path -> path/lpath

** css inclusion <done> and auto rebuild facility
** unified js. Propose the way to insert asis text 
   into result js file scheme2js project.
** svn update stitch.es
** give styles for dired markers

* Just viewable
** For batch converting
*** Disable auto-killing
*** Multi server <done>
*** /var/run file*
*** Remove http-equiv

** Fine grading server side cache control
*** Modification time <*>

** Fine grading client side cache control
*** create-time format<*>
*** flate&deflate

** Server Administration
*** /var/log/message separation*
*** cache GC 

** FS strcture
*** Sending dist-mapping.es in asis
*** attic*

** Clean up
*** storage separations <partially done>
**** (real-src-dir (build-path (config 'real-sources-dir) head)) in yogomacs/dests/file.scm
    => (sources-path head last) => (values real-src-dir real-src-path)
**** storage-of: sources, text-field...
*** raw-mode in dired

** Dired
*** kojipkgs-fedoraproject-org with no date
*** experimental link-to URL

* Virtual entries
** bugzilla
** amazon

* Interactive shell
** real parser
** grep*
** tag jump*
** diff
** exit
** completion
** proc and writeable target
** cookie
*** invert/default
*** yarn filter
** login
** API

* Annotation
** private/public/publish
** tour, compiled from annotations.
** image
** rendering backend
** post
** filter

* Multi user collaboration
** home
** queue
** ping/pong

* Real time interaction
** special backend rendering method: ajax

* Moblile

* machine generated yarns
** implicit yarn
** bugzilla id
** program symbol

* Public server


* improve scheme2js
(define (init-console)
  (let ((js-print (js-field *js* "print"))
	(js-GenericOutputPort-prototype  (js-field *js* "sc_GenericOutputPort")))
    (js-field-set! *js* 
		   "SC_DEFAULT_OUT"
		   (js-new  js-GenericOutputPort-prototype js-print))
    (js-field-set! *js*
		   "SC_ERROR_OUT"
		   (js-field *js* "SC_DEFAULT_OUT"))))
(init-console)

* improve biwascheme

* calendar



* dnd
(define exp-dnd 
  (lambda ()
    (js-new Draggable "minibuffer-prompt" (alist->object 
					   `((ghosting . #f)
					     (revert . #t)
					     (onStart . ,(lambda (draggable event)
							   (let1 prompt ($ "minibuffer-prompt")
							     (js-field-set! draggable
									    "original"
									    (js-field prompt "innerHTML"))
							     (prompt.update (<- "minibuffer")))))
					     (onEnd . ,(lambda (draggable event)
							 (let1 prompt ($ "minibuffer-prompt")
							   (prompt.update  (js-field draggable 
										     "original"))))))))
    (let1 options (alist->object 
		   `(
		     (onDrop . ,(lambda (draggable droppable event)
				  (let* ((id (js-field droppable "id"))
					 ;; l/N:.
					 ;; l/P:1/L:1
					 (target (if (eq? (string-ref id 2) #\N)
						     `(directory ,(car (reverse 
									(string-split id
										      ":"))))
						     `(file ,(string->number 
							      (car (reverse 
								    (string-split id
										  ":")))))))
					 (content `(text ,(<- "minibuffer")))
					 (date #f)
					 (full-name "Masatake YAMATO")
					 (mailing-address "yamato@redhat.com")
					 (subjects '("from-minibuffer"))
					 (transited #f))
				    (let1 prompt ($ "minibuffer-prompt")
				      (prompt.update  (js-field draggable 
								"original")))
				    (stitch-yarn `(yarn :target ,target
							:content ,content
							:date ,date
							:full-name ,full-name
							:mailing-address ,mailing-address
							:subjects ,subjects
							:transited ,transited))
				    )))
		     ))
      (($$ ".lfringe").each (lambda (id) (Droppables.add 
					  (js-field id "id")
					  options)))
      )))
;(add-hook find-file-post-hook exp-dnd)

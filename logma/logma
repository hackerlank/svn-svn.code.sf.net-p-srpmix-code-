#!/bin/sh
#| -*- scheme -*- |#
:; exec gosh -- $0 "$@"
;;
;;; logma.scm --- simple log manipulator
;;
;;  Copyright (C) 2009 Red Hat, Inc. All rights reserved.
;;  Copyright (C) 2009 Masatake YAMATO, Inc. All rights reserved.
;;
;;  This program is free software; you can redistribute it and/or modify it
;;  under the terms of the GNU General Public License as published by the
;;  Free Software Foundation; either version 2, or (at your option) any
;;  later version.
;;
;;  This program is distributed in the hope that it will be useful, but
;;  WITHOUT ANY WARRANTY; without even the implied warranty of
;;  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;;  General Public License for more details.
;;
;;  You should have received a copy of the GNU General Public License
;;  along with this program; see the file COPYING.  If not, write to the
;;  Free Software Foundation, Inc.,  675 Mass Ave, Cambridge,
;;  MA 02139, USA.
;;
(debug-print-width #f)

(use srfi-19)
(use srfi-1)

(define (read-line-safe . args)
  (guard (e
	  (else ""))
	 (read-line/nl   
	  (if (null? args) (current-input-port) (car args)))))

(define (print-help prog status)
  (display "Usage: \n")
  (newline)
  (format #t "  * adjusting time\n")
  (newline)
  (format #t "	  gosh ~s adjust DURATION < /var/log/messages\n" prog)
  (newline)
  (format #t "  * merging multiple logs\n")
  (newline)
  (format #t "	  cat /var/log/messages0 /var/log/messages1 /var/log/messages2 ... | gosh ~s sort \n" prog)
  (newline)
  (format #t "  * coloring the lines\n")
  (newline)
  (format #t "	  gosh ~s rainbow < /var/log/messages\n" prog)
  (newline)
  (format #t "  * help\n")
  (newline)
  (format #t "	  gosh ~s help|-h|--help\n" prog)
  (newline)
  (exit status))

(define (string->date+year date-string year)
  (string->date (string-append 
		 year
		 " " date-string) "~y ~b ~d ~H:~M:~S"))

(define (format-date date)
  (date->string date "~b ~d ~H:~M:~S"))

(define (rearrange-date date-string delta year)
  (format-date (time-utc->date
    (add-duration (date->time-utc (string->date+year date-string year))
		  delta))))

(define var-log-message-line-regex
  #/^([A-Z][a-z][a-z] +[0-9]+ [0-9]{2}:[0-9]{2}:[0-9]{2}) ([-a-zA-Z0-9]+) ([^\[\]]+)?(\[[0-9]+\])?: (.*)$/)
(define var-log-message-line-regex-slashed
  #/^([0-9]{4})\/([0-9]{2})\/([0-9]{2}) +([0-9]{2}:[0-9]{2}:[0-9]{2}) ([-a-zA-Z0-9]+) ([^\[\]]+)?(\[[0-9]+\])?: (.*)$/)

(define var-log-empty-message-line-regex
  #/^([A-Z][a-z][a-z] +[0-9]+ [0-9]{2}:[0-9]{2}:[0-9]{2}) ([-a-zA-Z0-9]+) ([^\[\]]+)(\[[0-9]+\])?:$/)
(define var-log-message-repeated-line-regex
  #/^([A-Z][a-z][a-z] +[0-9]+ [0-9]{2}:[0-9]{2}:[0-9]{2}) ([-a-zA-Z0-9]+) (last message repeated [0-9]+ times)$/)
(define var-log-message-signal-line-regex
  #/^([A-Z][a-z][a-z] +[0-9]+ [0-9]{2}:[0-9]{2}:[0-9]{2}) ([-a-zA-Z0-9]+) (exiting on signal [0-9]+)$/)

(define (emit-log-line stream date host cmd pid msg)
  (format stream
	  "~a ~a ~a~a~a~a~a\n"
	  date
	  host
	  (or cmd "")
	  (or pid "")
	  (if pid ":" "")
	  (if (or pid cmd) " " "")
	  msg))

(define (normalize-date year month date time)
  (let1 month (string->number month)
    (format "~a ~a ~a"
	    (ref (hash-table 'eq?
			     '(1 . "Jan")
			     '(2 . "Feb")
			     '(3 . "Mar")
			     '(4 . "Apr")
			     '(5 . "May")
			     '(6 . "Jun")
			     '(7 . "Jul")
			     '(8 . "Aug")
			     '(9 . "Sep")
			     '(10 . "Nov")
			     '(11 . "Oct")
			     '(12 . "Dec")) month)
	    date time)))

(define (distribute l date-distributor)
  (rxmatch-cond
    ((var-log-message-line-regex l)
     (#f date host cmd pid msg)
     (list (date-distributor date) 
	   host 
	   cmd
	   (or pid "")
	   msg))
    ((var-log-message-line-regex-slashed l)
     (#f year month day time host cmd pid msg)
     (list (date-distributor (normalize-date year month day time))
	   host 
	   cmd
	   (or pid "")
	   msg))
    ((var-log-message-repeated-line-regex l)
     (#f date host msg)
     (list (date-distributor date) 
	   host 
	   #f
	   #f
	   msg))
    ((var-log-message-signal-line-regex l)
     (#f date host msg)
     (list (date-distributor date) 
	   host 
	   #f
	   #f
	   msg))
    ((var-log-empty-message-line-regex l)
     (#f date host cmd pid)
     (list (date-distributor date) 
	   host 
	   cmd
	   (or pid "")
	   ""))
    (else
     #?=l
     #f)))
  
(define (do-adjust args)
  (let* ((delta (let1 d (string->number (cadr args))
		  (unless d
		    (with-output-to-port (current-error-port)
		      (cute print-help (car args) 1)))
		  (make <time> :type 'time-duration :second d)))
	 (year (date->string (time-utc->date (current-time)) "~y"))
	 (rearrange-date$ (cute rearrange-date <> delta year)))
    (let loop ((l (read-line-safe)))
      (unless (eof-object? l)
	(let1 d (distribute l rearrange-date$)
	  (when d
	    (apply emit-log-line #t d)))
	(loop (read-line-safe))))))

(define (do-sort args)
  (let* ((year (date->string (time-utc->date (current-time)) "~y"))
	 (string->date+year$ (cute string->date+year <> year)))
    (for-each
     (lambda (elt)
       (apply emit-log-line  #t (cons (format-date 
				       (time-utc->date (car elt)))
				      (cdr elt))))
     (stable-sort!
      (delete #f 
	      (map (cute distribute <>
			 (lambda (date)
			   (date->time-utc (string->date+year$ date))))
		   (delete! "" 
			    (port->list read-line-safe (current-input-port))
			    equal?)))
      (lambda (a b)
	(if (time=? (car a) (car b))
	    (if (string=? (cadr a) (cadr b))
		#f
		(string<? (cadr a) (cadr b)))
	    (time<? (car a) (car b))))))))

(define rainbow-base '((0/6 255   0   0)
		       (1/6 255 128   0)
		       (2/6 255 255   0)
		       (3/6   0 255   0)
		       (4/6   0 255 255)
		       (5/6   0   0 255)
		       (6/6 255   0 255)))
(define (rainbow i color-map fg)
  (apply string-append 
	 (map (cute format "~2'0x" <>)
	      (receive (low high)
		  (let loop ((rb color-map)
			     (c  #f)
			     (over #t))
		    (let* ((r (car rb))
			   (b (car r)))
		      (cond
		       ((eqv? b i) (values r r))
		       ((<  b i)   (loop (cdr rb) r over))
		       (over       (values c r))
		       (else       (loop (cdr rb) r #f)))))
		(let* ((base (car low))
		       (i    (- i base))
		       (e (- (car high) base))
		       (bcolor (cdr low))
		       (ecolor (cdr high)))
		  (if (eqv? i 0)
		      bcolor
		      (let1 ratio (/ i e)
			(define (calc i)
			  (let1 r 
			      (x->integer
			       (+ (* (- (ref ecolor i) (ref bcolor i)) ratio) (ref bcolor i)))
			    ((if fg values (pa$ - 255)) r)))
			(map calc '(0 1 2)))))))))

(define (do-rainbow args)
  (let* ((year (date->string (time-utc->date (current-time)) "~y"))
	 (string->date+year$ (cute string->date+year <> year))
	 (rearrange-date$ (lambda (date) (date->time-utc (string->date+year$ date)))))
    (let1 l (let loop ((l (read-line-safe))
		       (L (list)))
	      (if (eof-object? l)
		  L
		  (let1 d (distribute l rearrange-date$)
		    (loop (read-line-safe) (if d (cons d L) L)))))
      (let* ((be (car l))
	     (l  (reverse l))
	     (bb (car l))
	     (start (time-second (car bb)))
	     (range (- (time-second (car be)) start)))
	
	(print "<html><body>")
	(for-each
	 (lambda (entry)
	   (let* ((i (/ (- (time-second (car entry)) start) range))
		  (fg (rainbow i rainbow-base #t))
		  (bg (rainbow i rainbow-base #f))
		  (line (apply emit-log-line #f (date->string (time-utc->date (car entry))) (cdr entry))))
	     ;; TOOD: html escaping
	     (format #t "<pre style=\"~a;~a\">~a</pre>\n"
		     #`"color:#,|fg|"
		     "";#`"background-color:#,|bg|"
		     line)
	     ))
	 l)
	(print "</body></html>")
	))))

;;
;; read-line/nl is taken from gauche/mime.scm.
;; 
;;;
;;; mime.scm - parsing MIME (rfc2045) message
;;;  
;;;   Copyright (c) 2000-2009  Shiro Kawai  <shiro@acm.org>
;;;   
;;;   Redistribution and use in source and binary forms, with or without
;;;   modification, are permitted provided that the following conditions
;;;   are met:
;;;   
;;;   1. Redistributions of source code must retain the above copyright
;;;      notice, this list of conditions and the following disclaimer.
;;;  
;;;   2. Redistributions in binary form must reproduce the above copyright
;;;      notice, this list of conditions and the following disclaimer in the
;;;      documentation and/or other materials provided with the distribution.
;;;  
;;;   3. Neither the name of the authors nor the names of its contributors
;;;      may be used to endorse or promote products derived from this
;;;      software without specific prior written permission.
;;;  
;;;   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
;;;   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
;;;   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
;;;   A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
;;;   OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
;;;   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
;;;   TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
;;;   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
;;;   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
;;;   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
;;;   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;;;  
;;;  $Id: mime.scm,v 1.17 2008-05-10 13:36:08 shirok Exp $
;;;
(define (read-line/nl inp)
    (let loop ((c (read-char inp))
               (chars '()))
      (cond [(eof-object? c)
             (if (null? chars) c  (list->string (reverse! chars)))]
            [(char=? c #\newline) (list->string (reverse! chars))]
            [else (loop (read-char inp) (cons c chars))])))

(define (main args)
  (unless (<= 2 (length args))
    (with-output-to-port (current-error-port)
      (cute print-help (car args) 1)))
  (when (or (equal? (cadr args) "-h")
	    (equal? (cadr args) "--help")
	    (equal? (cadr args) "help"))
    (print-help (car args) 0))

  (case (string->symbol (cadr args))
    ('adjust
     (do-adjust (cons (car args) (cddr args))))
    ('sort
     (do-sort (cons (car args) (cddr args))))
    ('rainbow
     (do-rainbow (cons (car args) (cddr args))))
     ))


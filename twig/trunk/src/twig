#!/bin/bash
########################################################################
#
# twig: Manage a temporary branch for a package
#
# Copyright (C) 2008-2009 Masatake YAMATO
#
# Author: Masatake YAMATO <yamato@redhat.com>
#
# program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
########################################################################

# TODO:
# verify
# reduce/fold
# vfork/unshare

twig_commands="home fork info diff specdiff pedigree commit touch record build addlog help"

function twig_p
{
    test -d $1/TWIG
}

#
#
# twig home [dir]
#
#
function twig_home_help
{
    echo "    " home [DIR]
}

function twig_home
{
    local d

    if test x"$1" = x; then
	d=$(pwd)
    else
	d=${1}
    fi

    if test ! -d ${d}; then
	return 1
    elif twig_p $d; then
	return 0;
    elif test $d = "/"; then
	return 2;
    else
	twig_home $(dir $d)
	return $?
    fi
}

#
#
# twig fork name from [dir]
#
#
function twig_fork_help
{
    echo "    " fork NAME FROM [DIR]
}

function twig_fork
{
    local name=$1
    local from=$2
    local dir=$3

    if test -z "${name}" -o -z "${from}"; then
	twig_help 1>&2
	exit 1
    fi
    
    if [[ "${name}" =~ - ]]; then
	echo "Do not use - in name: ${name}" 1>&2
	exit 1
    fi

    if test -z "${dir}"; then
	dir=./${name}
    fi

    if twig_p "${from}"; then
	twig_fork_from_twig "${name}" "${from}" "${dir}"
    else
	twig_fork_from_sources "${name}" "${from}" "${dir}"
    fi
}

function twig_fork_from_twig
{
    twig_fork_generic $1 $2 $3 twig
}

function twig_fork_from_sources
{
    twig_fork_generic $1 $2 $3 sources
}

function twig_fork_generic
{
    local name=$1
    local from=$2
    local ln_from
    local dir=$3
    local type=$4

    if ! twig_verify_soruces "$from"; then
	echo "Broken sources directory: $from" 1>&2
	exit 1
    fi

    if ! mkdir $dir; then
	echo "Cannot mkdir: $dir" 1>&2
	exit 1
    fi

    for f in $from/{SRPMIX,STATUS,CRADLE,archives,plugins,pre-build,specs.spec}; do
	if [ -e $f ]; then
	    if ! cp -r $f $dir/; then
		echo "Cannot cp: $from/* $dir" 1>&2
		exit 1
	    fi
	fi
    done


    if ! mkdir $dir/TWIG; then
	echo "Cannot mkdir $dir/TWIG" 1>&2
	exit 1
    fi

    if test "${from:0:1}" != /; then
	ln_from=$(pwd)/$from;
    else
	ln_from=$from
    fi

    if ! ln -s $ln_from $dir/TWIG/from; then
	echo "Cannot ln $from $dir/TWIG/from" 1>&2
	exit 1
    fi

    if ! echo $name > $dir/TWIG/name; then
	echo "Cannot commit name to $dir/TWIG/name" 1>&2
	exit 1
    fi

    if ! twig_hack_release $dir/specs.spec $name > $dir/twig.spec; then
	echo "Failed to modify Release line in $dir/specs.spec" 1>&2
	exit 1
    else
	mv $dir/twig.spec $dir/specs.spec
    fi

    if ! twig_hack_patch_decl $dir/specs.spec $name > $dir/twig.spec; then
	echo "Failed to add patch decl line to $dir/specs.spec" 1>&2
	exit 1
    else
	mv $dir/twig.spec $dir/specs.spec
    fi

    if ! twig_hack_patch_apply $dir/specs.spec $name > $dir/twig.spec; then
	echo "Failed to add patch apply line to $dir/specs.spec" 1>&2
	exit 1
    else
	mv $dir/twig.spec $dir/specs.spec
    fi


    if ! twig_install_stub_patch ${dir} ${name}; then
	echo "Failed to install stub patch" 1>&2
	exit 1
    fi

    (cd ${dir}; twig_addlog "twigged from ${from}")


    sleep 1
    if ! echo 0 > $dir/TWIG/build_id; then
	echo "Cannot commit initial build_id to $dir/TWIG/build_id" 1>&2
	exit 1
    fi
}

function twig_hack_release
{
    local spec=$1
    local name=$2

    sed -e "s/^Release:.*/\0.${name}%{?twig_${name}_buildid}/" < ${spec}
}

function twig_hack_patch_decl
{
    local spec=$1
    local name=$2
    local patch_decl
    local patch_line
    local patch_num

    local source_decl
    local source_line

    patch_decl=$(grep -E -n -e "^Patch[0-9]+:" "${spec}" | tail -1)
    if test -n "${patch_decl}"; then
	patch_line=$(echo $patch_decl | sed -e 's/:Patch.*//')
	patch_num=$(echo $patch_decl | sed -e 's/.*:Patch\([0-9]*\).*/\1/')

	head -${patch_line} ${spec}
	echo Patch$(( ${patch_num} + 1 )): twig-${name}.patch
	tail -n +$(( ${patch_line} + 1 )) ${spec}
	return 0
    fi

    source_decl=$(grep -E -n -e "^Source[0-9]+:" "${spec}" | tail -1)
    if [ -n "${source_decl}" ]; then
	source_line=$(echo $source_decl | sed -e 's/:Source.*//')

	head -${source_line} ${spec}
	echo
	echo Patch0: twig-${name}.patch
	tail -n +$(( ${source_line} + 1 )) ${spec}
	return 0
    fi
	
    
    echo "Cannot find the line to put the patch-decl" 1>&2
    exit 1
}

function twig_hack_patch_apply
{
    local spec=$1
    local name=$2

    local patch_decl
    local patch_num

    patch_decl=$(grep -E -n -e "^Patch[0-9]+:" "${spec}" | tail -1)
    if test -n "${patch_decl}"; then
	patch_num=$(( $(echo $patch_decl | sed -e 's/.*:Patch\([0-9]*\).*/\1/') - 1 ))

	if [ "${patch_num}" = -1 ]; then
	    local setup
	    local setup_line

	    setup=$(grep -E -n -e "^%setup.*" "${spec}" | tail -1)
	    if [ -n "${setup}" ]; then
		setup_line=$(echo $setup | sed -e 's/:%setup.*//')

		head -${setup_line} ${spec}
		echo %patch0 -p3 -b .${name}
		tail -n +$(( ${setup_line} + 1 )) "${spec}"
		return 0
	    else
		echo "Cannot find the line to put the patch-applying" 1>&2
		return 1
	    fi
	else
	    local patch_line
	    local patch_appy
	    
	    patch_apply=$(grep -E -n -e "%patch${patch_num}.*" "${spec}")
	    if test -z "${patch_apply}"; then
		echo "Cannot find patch apply line: %patch${patch_num}" 1>&2
		return 1
	    fi
	    patch_line=$(echo $patch_apply | sed -e 's/:%patch.*//')
	    
	    head -${patch_line} ${spec}
	    echo %patch$(( ${patch_num} + 1 )) -p3 -b .${name}
	    tail -n +$(( ${patch_line} + 1 )) ${spec}
	    return 0
	fi
    fi
	
    echo "Internal error: cannot find previously inserted patch-decl line" 1>&2
    return 1
}

function twig_install_stub_patch
{
    local dir=$1
    local name=$2
    local file

    file=$dir/archives/twig-${name}.patch
    test -f $file && rm $file
    touch $file
#    echo "Hack for \"error: File PATCH is smaller than 13 bytes\"" \
          > $dir/archives/twig-${name}.patch
}


function twig_verify_soruces
{
    # CRADLE is still optional.
    test -d "$1"                 -a \
	-f "$1/SRPMIX"           -a \
	-f "$1/STATUS"           -a \
	-f "$1/specs.spec"       -a \
	-d "$1/pre-build"        -a \
	-d "$1/archives"         -a \
	"$(cat $1/STATUS)" = "0" &&
    [[	"$(cat $1/SRPMIX)" =~ 3.99.[[:digit:]]  ||           \
	"$(cat $1/SRPMIX)" =~ 3.1[[:digit:]][[:digit:]].[[:digit:]]    \
    ]]
}

#
#
# twig diff [with] 
#
# TODO: twig diff FILE
#
#
function twig_diff_help
{
    echo "    " diff [WITH]
}

function twig_diff
{
    if ! twig_p . ; then
	echo "$(pwd) is not twig dir" 1>&2
	exit 1
    fi

    if ! test -d ./TWIG/from/archives; then
	echo "Cannot access $(pwd)/TWIG/from/pre-build"
	exit 1
    fi

    diff -ruN -x '*~' TWIG/from/pre-build ./pre-build
}

#
#
# twig specdiff [with]
#
#
function twig_specdiff_help
{
    echo "    " specdiff [WITH]
}


function twig_specdiff
{
    if ! twig_p . ; then
	echo "$(pwd) is not twig dir" 1>&2
	exit 1
    fi

    if ! test -r ./TWIG/from/specs.spec; then
	echo "Cannot access $(pwd)/TWIG/from/specs.spec"
	exit 1
    fi

    diff -uN TWIG/from/specs.spec ./specs.spec
}

#
#
# twig record
#
#
function twig_record_help
{
    :
}

function twig_record
{
    twig_commit "$@"
}

#
#
# twig commit
#
#
function twig_commit_help
{
    echo "    " commit|record
}

function twig_commit
{
    local name
    local size
    local path

    twig_diff > \#twig.patch\#
    name=$(cat TWIG/name)
    path="archives/twig-${name}.patch"
    mv \#twig.patch\# "$path"

    if test ! -s "$path"; then
	echo "Hack for \"error: File PATCH is smaller than 13 bytes\"" \
	    > "$path"
    fi
}

function twig_touch_help
{
    echo "	" touch
}

function twig_touch
{
    local name
    local path

    name=$(cat TWIG/name)
    path=archives/twig-${name}.patch

    if [ -f "$path" ]; then
	touch "$path"
    else
	echo "Hack for \"error: File PATCH is smaller than 13 bytes\"" \
	    > "$path"
    fi
}

#
#
# twig info
#
#
function twig_info_help
{
    echo "    " info
}

function twig_info
{
    local from
    local status

    if ! twig_p .; then
	echo "$(pwd) is not TWIG dir" 1>&2
	exit 1
    fi


    echo Name: $(cat TWIG/name)

    from=$(readlink -n TWIG/from)
    if test -d ${from}; then
	status="valid"
	if twig_p ${from}; then
	    status="$status,twig"
	else
	    status="$status,sources"
	fi
    else
	status="broken"
    fi

    echo From: $from "["$status"]"
}

#
#
# twig pedigree
#
#
function twig_pedigree_help
{
    echo "    " pedigree
}

function twig_pedigree
{
    twig_pedigree_full 0
}

function twig_pedigree_full
{
    local num=$1

    if twig_p .; then
	twig_info | sed -e 's/.*/'"<$num> "'\0/'
    else
	exit 0
    fi

    from=$(readlink -n TWIG/from)
    if test -d "${from}"; then
	(cd ${from};
	 twig_pedigree_full $(( $num + 1 )))
    fi
}

#
#
# twig build
#
#
# TODO: BUILD ID
#
BUILD_ID=
BUILD_ID_SET_VIA_CMDLINE=
BUILD_STAGE=-ba
BUILD_IGNORE_MODIFICATION_TIME=
TARGET_OPT=


function twig_build_help
{
    echo "    " build "-h"
    echo "    " build "[-ba|-bb|-bp|-bc|-bi|-bl|-bs] \\" 
    echo "           [--ignore-modification-time|-i] [--touch] [--target=TARGET]" [BUILD_ID]
    echo 
    echo "            If No BUILD_ID is given, use twig internal"
    echo "            counter as BUILD_ID"
    echo
}

function twig_parse
{
    while [ $# -gt 0 ]; do
	case "$1" in
	    --help|-h)
		twig_build_help 1>&2
		exit 0
		;;
	    -ba|-bb|-bp|-bc|-bi|-bl|-bs)
		BUILD_STAGE="$1"
		shift 1
		;;
            --ignore-modification-time|-i)
		BUILD_IGNORE_MODIFICATION_TIME=yes
		shift 1
		;;
	    --touch)
		touch ./specs.spec
		shift 1
		;;
	    --target=*)
                TARGET_OPT=$1
		shift 1
		;;
	    -*)
		echo unknown option: "$1" 1>&2
		twig_build_help 1>&2
		exit 1
		;;
	    *)
		break;
		;;
	esac
    done

    if [ $# -gt 0 ]; then
	BUILD_ID=$1
	BUILD_ID_SET_VIA_CMDLINE=yes
	shift 1
    fi

    if [ "x$BUILD_ID" = "x" ]; then
	if [ ! -e ./TWIG/build_id ]; then
	    echo 0 > ./TWIG/build_id
	fi
	read BUILD_ID < ./TWIG/build_id
	BUILD_ID=$(expr $BUILD_ID + 1)
	BUILD_ID_SET_VIA_CMDLINE=no
    fi
}

function twig_warning
{
    local old_file


    old_file=$1

    echo "*** $old_file is older than ./TWIG/build_id"
    echo "*** You may forget to run \"twig commit\"."
    echo "*** To ignore the modification time use --ignore-modification-time"
    echo "*** or 'twig touch' to update the time stamp"
    
}
function twig_build
{
    local status
    local name


    if ! twig_p .; then
	echo "not twig dir" 1>&2
	exit 1
    fi

    twig_parse "$@"

    # if build_id is newer than the patch...
    name=$(cat ./TWIG/name)
    if test "x$BUILD_IGNORE_MODIFICATION_TIME" != xyes; then
	if test ./archives/twig-${name}.patch -ot ./TWIG/build_id; then
	    if test ./specs.spec -ot ./TWIG/build_id ; then
		twig_warning "./archives/twig-${name}.patch" 1>&2
		exit 1
	    fi
	fi
    fi
	

    touch ./TWIG/build_id

    mkdir -p twig/rpms
    mkdir -p twig/srpms
    mkdir -p twig/build
    mkdir -p twig/buildroot
    rpmbuild --define "_rpmdir `pwd`/twig/rpms"				\
	     --define "_srcrpmdir `pwd`/twig/srpms"			\
	     --define "_builddir `pwd`/twig/build"			\
	     --define "_buildrootdir `pwd`/twig/buildroot"		\
	     --define "_sourcedir `pwd`/archives"			\
             --define "twig_$(cat TWIG/name)_buildid ${BUILD_ID}"	\
             --define "_default_patch_fuzz 2"				\
	     ${TARGET_OPT}                                              \
	     $BUILD_STAGE specs.spec
    status=$?

    if [ $status = "0" -a "$BUILD_ID_SET_VIA_CMDLINE" = "no" ]; then
	echo $BUILD_ID > ./TWIG/build_id
    fi
    
}

#
#
# twig addlog
#
#
function twig_addlog
{
    local spec=./specs.spec
    local changelog_decl
    local changelog_line

    local message="$1"
    local user=${2:-"Injected by Twig"}
    local maddr=${3:-"devnull@example.com"}


    if ! twig_p . ; then
	echo "$(pwd) is not twig dir" 1>&2
	exit 1
    fi

    changelog_decl=$(grep -E -n -e '^%changelog' "${spec}" | tail -1)
    if test -n "${changelog_decl}"; then
	changelog_line=$(echo ${changelog_decl} | sed -e 's/:%changelog.*//')

	{
	    head -${changelog_line} ${spec}
	    LANG=C date +"* %a %b %e %Y ${user} <${maddr}> - $(cat TWIG/name)"
	    echo "- ${message}"
	    echo
	    tail -n +$(( ${changelog_line} + 1 )) ${spec}
	} > ./twig.spec

	mv ${spec} ${spec}.backup
	mv twig.spec ${spec}
    fi

}

function twig_addlog_help
{
    echo "    " addlog MESSAGE [USER] [MAIL_ADDRESS]
}

#
#
# twig help
#
#
function twig_help_help
{
    echo "    " help
}
function twig_help
{
    echo Usage: twig COMMAND ARGS...
    echo
    echo COMMAND:

    for c in ${twig_commands}; do
	twig_${c}_help
    done
}

#
#
# main
#
#
function main
{
    cmd=$1
    shift 1

    for c in ${twig_commands}; do
	if test x"$c" = x"$cmd"; then
	    twig_${cmd} "$@"
	    exit $?
	fi
    done

    twig_help 1>&2
    exit 1
}

main "$@"

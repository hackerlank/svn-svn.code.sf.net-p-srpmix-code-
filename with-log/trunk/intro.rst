========================================================================
FOSSにおけるトラブル解決のためのログ活用
========================================================================

はじめに
************************************************************************

顧客より製品ソフトウェアのトラブルについて問合せを受けると、サポートエ
ンジニアが最初にやることは顧客のシステムで何が起っているかを把握に努め
る。再現できるかどうか、深刻な不具合であるか仕様であるか、ワークアラウ
ンドがあるか、どうやって修正するかといった調査は、全て何が起っているか
をある程度把握した後の作業である。

多くの場合、顧客からの情報は十分でないため、何が起っているかわからない。
従って一時回答はより詳細な情報(ログ)を得る方法を提示することとなる。ロ
グさえ手に入れば、それを出力したソースコードの近辺を読解してシステムが
何を実行しようとしていたかわかる。ログの量が十分に多ければ読むべきソー
スコード範囲をかなり絞ることができる。

ソースコードを持ち出してこなくても、事例ベースでの検索対象とすることが
できる。ログだけ読めばトラブルの原因がわかってしまう場合すらある。実際
筆者は、使ったことはおろか、どのような用途に使うのかすら知らないソフト
ウェアについて問合せを受け、ログだけから作成した回答でクローズしたこと
がある。

これだけ調査が容易になるなら、なぜ顧客は問合せに詳細なログを含めないの
か不思議に思うかもしれない。これには理由がある。ログの取得方法自体が知
られていないためである。そもそもログを得る方法を一時回答にて提示するた
めにサポートエンジニアは、時間をかけてソースコードを調べるのである。規
模の大きいソフトウェアはそれぞれ独自のログ制御機構を実装しているため、
ログの取得方法を発見するにはそれなりの調査が必要となる。

そこで、各ソフトウェア毎にログの取得方法をまとめたカタログを用意してお
くことを思いついた。このカタログにより迅速に一時回答できる。また顧客に
カタログを渡せば、そもそもログの取得方法だけを提示した一時回答は必要な
くなる。カタログの作成には手間かかかるが、誰かが1度作成すれば将来同じソ
フトウェアに問合せがあれば回収できる。また同僚や顧客とも共有できる。

本文章は2つの部分から構成される。特定のソフトウェアによらずログについて
述べた部分と、様々なソフトウェアに関するカタログ部分である。従来ソフト
ウェアの使い方や設定の仕方と比較するとログの取得方法というの知識として
重要視されていなかった。せいぜい設定対象などの1項目扱いである。そのため
ログについて説明しようにも筆者、読者での共通の概念が確立されていない。
そこで、ログについてサポートエンジニアが知っておくと良いと考えたことを
説明する。それを土台として、カタログを記述する。

カタログ部分については順次追加、更新する予定であるが、サポート対象とな
るソフトウェアの数に対して、筆者の時間と知見は限られている。そこで読者
の手によりカタログの作成と更新を希望している。新しいソフトウェアに対す
るカタログの作成は勿論、読者の知見に基づく加筆があれば本文章の価値は一
層増す。OSSサポートエンジニアコミュニティの手によって本文章が成長するよ
う期待してGNU Free Documentation Licenseの元で配布する。


ログにまつわる概念
************************************************************************

ソフトウェア開発者と利用者の間にいて仕事をするため、サポートエンジニア
は双方の立場から作業する必要がある。ログについて言えば、詳細なログの取
得方法というのは利用者側の知識である。開発者側の知識というのは、ソース
コード中でどのようにログ出力処理が記述されているか、ということである。
この2つの知識を持ってすれば、ログから読むべきソースコードの範囲を限定し
たり、不具合の起点になっているメッセージをみつけるなどといったログの読
解したりできる。そこで語句の定義をかねてソフトウェア開発者とログとの関係
ログと利用者との関係を俯瞰する。

ソフトウェアの開発者は、不具合などが起ったときに後から動作の過程を追跡
できるようにログ記録(あるいはlogging)処理をコード中の様々な場所に挿入し
ている。より具体的には主となる処理の要所や、プログラムが正しく記述でき
ていれば、実行されないはずの箇所に、logging処理を実行する関数(logging関
数) の呼び出しを挿入する。

logging関数に引数として渡された文字列(ログメッセージ)は、logging関数が
実行されると、ファイルや端末といっしゃログ出力先に保存されたり印字されたり
すると期待される。期待通り動作すれば「ログが出力された」と言う。ログ出力先
から、ログメッセージが閲覧できるよう取り出すことを「ログを取得する」と言う。

「期待される」と書いたのは、もちろん期待通りにならないことがあるからである。
ソースコード上のlogging関数の呼び出しが配置されていたとしても、それが
ログが出力に結びつくかないことがある。ソフトウェアビルド時に、logging
関数の呼び出し部分が切り落している場合がある。切り落されていることを
「logging関数の不活性化」と呼ぶことにする。またソフトウェア実行時に
「ログ出力が抑制されている」場合もある。

ログはじゃんじゃん出した方が良いとは述べたが、

* Unix系のコマンドというのは伝統的に寡黙であることが期待される。
* 膨大なログ出力中に重要なログメッセージが埋もれてしまう。
* ログファイルがあふれて別のトラブルの原因になる。

といった理由で一般にやたらログを出すことは嫌われる、という前提がある。

そこでログをやたらと出すかわりに「logging関数の不活性化」や「ログ出力が
抑制」が実施される。どちらが選ばれるかというのは、開発者が...

ログとソースコードの対応付け
************************************************************************


汎用のファシリティ: syslog
************************************************************************


ログ出力に関するカタログのテンプレート
************************************************************************

* 対象ソフトウェアの名称(NAME)
* 対象ソフトウェアの概要(SUMMARY)
* 対象ソフトウェアの所在(AVAILABILITY)
* ログの取得と制御(RETRIEVE METHOD)
* ログメッセージの例(LOG EXAMPLE)
* ログの出力の機構(PRINT FUNCTION)
* ログ出力の活性化(ACTIVATION)
* ログ関数の例(SOURCE EXAMPLE)
* その他(NOTES)
* 著者(AUTHORS)


ログ出力に関するカタログ
************************************************************************

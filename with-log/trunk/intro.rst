.. -*- rst -*-
========================================================================
FOSSにおけるトラブル解決のためのログ活用
========================================================================

はじめに
************************************************************************

顧客よりソフトウェアの動作について問合せを受けると、サポートエンジニア
が最初にやることは顧客のシステムで何が起っているかを把握することである。
深刻な問題であるかどうか、不具合であるか仕様であるか、ワークアラウンド
があるか、修正方法といったことは、全て何が起っているかを把握した後の作
業である。

多くの場合、顧客からの情報は十分でないため、何が起っているかわからない。
従って一時回答はより詳細な情報(ログ)を得る方法を提示することとなる。ロ
グさえ手に入れば、それを出力したソースコードの近辺を読解してシステムが
何を実行しようとしていたかわかる。ログの量が十分に多ければ読むべきソー
スコード範囲をかなり絞ることができる。

ソースコードを持ち出してこなくても、事例ベースでの検索対象とすることが
できる。ログだけみて回答がわかってしまう場合すらある。

これだけ調査が容易になるなら、なぜ顧客は一時回答を得るまで自分でログを
取得しようとしないのか不思議に思うかもしれない。これには理由がある。ロ
グの取得方法自体が知られていないためである。そもそもログを得る方法を一
時回答にて提示するためにサポートエンジニアは、ソースコードを調べるので
ある。規模の大きいソフトウェアはそれぞれ独自のログ制御機構を実装してい
るため、ログの取得方法を発見するにはそれなりの手間がかかる。

そこで、各ソフトウェア毎にログの取得方法をまとめたカタログを用意してお
けば、迅速に一時回答できると考えた。顧客にカタログを渡せば、そもそもロ
グの取得方法だけを提示した一時回答は必要なくなる。

語句の定義
************************************************************************

* ログ出力量の制御
* ログの出力先
* ログ関数
* ログ関数の活性化

一般的なログの知識
************************************************************************

* syslog

ログとソースコードの対応付け
************************************************************************

ログ出力に関するカタログのテンプレート
************************************************************************

* 対象ソフトウェアの名称(NAME)
* 対象ソフトウェアの概要(SUMMARY)
* 対象ソフトウェアの所在(AVAILABILITY)
* ログの取得と制御(RETRIEVE METHOD)
* ログメッセージの例(LOG EXAMPLE)
* ログの出力の機構(PRINT FUNCTION)
* ログ出力の活性化(ACTIVATION)
* ログ関数の例(SOURCE EXAMPLE)
* その他(NOTES)
* 著者(AUTHORS)


ログ出力に関するカタログ
************************************************************************

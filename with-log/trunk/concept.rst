2. ログにまつわる概念
************************************************************************

ソフトウェア開発者と利用者の間に立って仕事をするため、サポートエンジニ
アには双方の視点が必要です。ログについて言えば、詳細なログの取得方法と
いうのは利用者側の知識です。開発者側の知識というのは、ソースコード中
でどのようにログ出力処理が記述されているか、ということになります。この
2つの知識を持ってすれば、ログから読むべきソースコードの範囲を限定したり、
不具合の起点になっているメッセージを見つけるなどといったログの読解が可
能となります。そこで語句の定義を兼てソフトウェア開発者とログとの関係、
ログと利用者との関係を説明します。

ソフトウェアの開発者は、不具合などが起ったときに後から動作の過程を追跡
できるように「ログ記録」(あるいは「logging」)処理をコード中の様々な場所
に挿入しておきます。より具体的には主となる処理の要所や、プログラムが正
しく記述できていれば、実行されないはずの箇所に、logging処理を実行する関
数「logging関数」の呼び出しを挿入します。

logging関数に引数として渡された文字列「ログメッセージ」は、logging関数
が実行されると、利用者はファイルや端末といったログ出力先に保存されたり
印字されたりすると期待します。期待通り動作すれば「ログメッセージが出力
された」と言います。「ログ」というのは厳密には「ログメッセージ」の列で
あると言えます。ログ出力先から、ログメッセージが閲覧できるよう取り出す
ことを「ログを取得する」と言います。出力先がファイルであることが多いの
で、ログを見るのに「取得する」という表現は大袈裟だと思うかもしれません。
しかしソフトウェアによっては取得に特別なコマンドを必要とするものがあり
ます。またそもそも出力先のファイルがどこになるか明記されていないものも
あるので「取得する」と表現することにしました。


「印字されたりすると期待します」と書いたのは、期待通りにならないことが
あるからです。ソースコード上のlogging関数の呼び出しが配置されていたとし
ても、それがログ出力に結びつかないことがあります。まずソフトウェアビル
ド時に、logging 関数の呼び出し部分が切り落されている場合があります。こ
れを「logging関数の不活性化」と呼ぶことにします。またソフトウェア実行時
に「ログ出力が抑制されている」場合もあります。トラブルが発生したシステ
ムについて理解を深めるには、「logging関数を活性化」してパッケージをリビ
ルドしインストール、再実行する、あるいは「ログ出力を開放して」再実行す
る必要があります。

ログを多く出した方がトラブルの調査には都合が良いのですが、
ソフトウェアというのはトラブルシューティングの対象として存在して
いるわけではありません。


* 膨大なログ出力中に重要なログメッセージが埋もれてしまう。
* ログファイルがあふれて別のトラブルの原因になる。
* UNIX系のコマンドというのは伝統的に寡黙であることが期待される。

といった理由で一般に過多なログを出力しません。そのためlogging関数が不活
性化されていたり、デフォルトの設定ではログ出力が抑制されています。特に
利用者が見ても意味がないと思われるようなログメッセージを出力するための
logging関数の呼び出しは不活性化されていることが多いです。しかしトラブル
と闘うサポートエンジニアが見れば意味があります。

調査が進み動作がおかしいと考えられる箇所がソースコード上で絞られてくれ
ば、その箇所についてより詳細に動作を追いたくなります。logging関数とその
活性化について知っていれば、logging関数呼び出しを追加してパッケージをリ
ビルドしてしまうことができます。


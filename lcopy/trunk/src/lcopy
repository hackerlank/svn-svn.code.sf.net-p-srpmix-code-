#!/bin/bash

#
# bash is really needed.
#

ROOT_DIR=/var/lib/lcopy
SOURCES_DIR=${ROOT_DIR}/sources
SPECS_DIR=${ROOT_DIR}/specs
LOG_DIR=${ROOT_DIR}/log


PACKAGE=
PHASH=
BRANCH=trunk
REPO=
MODULE=
VCS=
RELEASE=0

NO_SPEC=
ONLY_SPEC=

SUPPORTED_VCSs="cvs git git-clone svn hg bzr"
function print_usage
{
    echo "Usage: "
    echo "lcopy [--release=RELEASE] [--branch=BRANCH] [--no-spec|--only-spec] vcs commands..."
    echo ""
    echo "lcopy [--help|-h]"
    echo ""
    echo "Expected commands line for each vcs:"
    for vcs in ${SUPPORTED_VCSs}; do

	echo ${vcs}:
	${vcs}_checkout_print_usage
	echo

    done
}

#
# plugin
# 
PREFIX=/usr/libexec
PLUGINDIR=${PREFIX}/lcopy/plugins


function main
{
    local tstamp

    cd ${SOURCES_DIR}

    while [ $# -gt 0 ]; do
	case "$1" in
	    --help|-h)
		print_usage
		exit 0
		;;
	    --release=*)
		RELEASE=${1/--release=/}
		shift 1
		;;
	    --branch=*)
		BRANCH=${1/--branch=/}
		shift 1
		;;
	    --no-spec)
		NO_SPEC=1
		shift 1
		;;
	    --only-spec)
		ONLY_SPEC=1
		shift 1
		;;
	    *)
		break
		;;
	esac
    done

    if test -z "$1"; then
	echo "Too few arguments" 2>&1
	print_usage 2>&1
	exit 1
    fi

    if ! lcopy_is_member "${1}" $SUPPORTED_VCSs; then
	echo "unknown vcs: ${1}" 2>&1
	print_usage 2>&1
	exit 1
    fi

    if ! ${1}_checkout_parse_cmdline "$@"; then
	echo "failed in the command line for ${1}" 2>&1
	print_usage 2>&1
	exit 1
    fi
    PHASH=$(lcopy_package_hash $PACKAGE)

    if test -z "$NO_SPEC"; then
	make_specs
    fi

    if test -z "$ONLY_SPEC"; then
	sudo -H -u lcopy mkdir -p ${PHASH}/${PACKAGE}
	cd ${PHASH}/${PACKAGE}
	if do_checkout; then
	    status=$?
	    tstamp=`LANG=C date`
	    es_print lcopy checkout \
		:cmdline \""$*"\"   \
		:status ${status}   \
		:date \""${tstamp}"\" | \
		sudo -H -u lcopy tee -a ${LOG_DIR}/lcopy-checkout.es > /dev/null
	    
	    cd ${BRANCH}
	    status=$?
	    sudo -H -u lcopy mkdir -p .lcopy
# TODO: plugin directory
	    if test "$status" = 0; then
		do_checkout_after
		lcopy_run_plugins ${LOG_DIR}/lcopy-refresh.es \
		    "${VCS}" "$(pwd)" "${tstamp}"
	    fi
	fi
    fi
}


#
# svn
#
function svn_checkout_parse_cmdline
{
    VCS=$1
    CMD=$2
    REPO=$3
    PACKAGE=$4
    
    if test "x$VCS" != xsvn; then
	echo "Wrong vcs: $VCS" 2>&1
	print_usage 2>&1
	exit 1
    fi

    if test \( "x$CMD" != "xcheckout" \) -a \
	    \( "x$CMD" != "xco"    \); then
	echo "broken svn command line: $@" 2>&1
	print_usage 2>&1
	exit 1
    fi

    if test -z "$REPO"; then
	echo "no repository" 2>&1
	print_usage 2>&1
	exit 1
    fi

    # TODO: Handle
    # svn co svn://svn@svn.a-k-r.org/akr/wfo/trunk wfo
    if echo "$REPO" | grep -E -e "^http[s]?://" > /dev/null 2>&1; then
	:
    else
	echo "unknown repository specification: $REPO" 2>&1
	print_usage 2>&1
	exit 1
    fi
    
    if test -z "$PACKAGE"; then
	echo "no packagedir" 2>&1
	print_usage 2>&1
	exit 1
    fi    

    return 0
}

function svn_checkout_print_usage
{
    echo "	" svn "checkout|co" REPOS PACKAGEDIR
    echo "	" "REPOS => http://... or https://..."
}

#
# git
#
function git-clone_checkout_parse_cmdline
{
    shift 1
    git_checkout_parse_cmdline git clone "$@"
}

function git-clone_checkout_print_usage
{
    echo "	" git-clone REPOS PACKAGEDIR
}

function git_checkout_parse_cmdline
{
    VCS=$1
    CMD=$2
    REPO=$3
    PACKAGE=$4

    if test "x$VCS" != xgit; then
	echo "wrong vcs: $VCS" 2>&1
	print_usage 2>&1
	exit 1
    fi

    if test \( -z "$CMD"          \) -a    \
            \( "$CMD" != clone \) ; then
	echo "broken git command line: $@" 2>&1
	print_usage 2>&1
	exit 1
    fi

    if test -z "$REPO"; then
	echo "no repository" 2>&1
	print_usage 2>&1
	exit 1
    fi

 
# TODO
#    if test "x$(echo $REPO | sed -e 's/[^:]//g')" != "x::::"; then
#	echo "broken repo specification: $REPO" 2>&1
#	print_usage 2>&1
#	exit 1
#    fi

    if test -z "$PACKAGE"; then
	echo "no packagedir" 2>&1
	print_usage 2>&1
	exit 1
    fi

    return 0
}

function git_checkout_print_usage
{
    echo "	" git clone REPOS PACKAGEDIR
}

#
# hg
#
function hg_checkout_parse_cmdline
{
    VCS=$1
    CMD=$2
    REPO=$3
    PACKAGE=$4

    if test "x$VCS" != xhg; then
	echo "wrong vcs: $VCS" 2>&1
	print_usage 2>&1
	exit 1
    fi

    if test \( -z "$CMD"          \) -a    \
            \( "$CMD" != clone \) ; then
	echo "broken hg command line: $@" 2>&1
	print_usage 2>&1
	exit 1
    fi

    if test -z "$REPO"; then
	echo "no repository" 2>&1
	print_usage 2>&1
	exit 1
    fi

    if echo "$REPO" | grep -E -e "^http[s]?://" > /dev/null 2>&1; then
	:
    else
	echo "unknown repository specification: $REPO" 2>&1
	print_usage 2>&1
	exit 1
    fi
 
# TODO
#    if test "x$(echo $REPO | sed -e 's/[^:]//g')" != "x::::"; then
#	echo "broken repo specification: $REPO" 2>&1
#	print_usage 2>&1
#	exit 1
#    fi

    if test -z "$PACKAGE"; then
	echo "no packagedir" 2>&1
	print_usage 2>&1
	exit 1
    fi

    return 0
}

function hg_checkout_print_usage
{
    echo "	" hg clone REPOS PACKAGEDIR
}

#
# Bzr
# 
function bzr_checkout_parse_cmdline
{
    VCS=$1
    CMD=$2
    REPO=$3
    PACKAGE=$4

    if test "x$VCS" != xbzr; then
	echo "wrong vcs: $VCS" 2>&1
	print_usage 2>&1
	exit 1
    fi

    if test \( -z "$CMD"          \) -a    \
            \( "$CMD" != branch \) ; then
	echo "broken bzr command line: $@" 2>&1
	print_usage 2>&1
	exit 1
    fi

    if test -z "$REPO"; then
	echo "no repository" 2>&1
	print_usage 2>&1
	exit 1
    fi

    if echo "$REPO" | grep -E -e "^http[s]?://" > /dev/null 2>&1; then
	:
    else
	echo "unknown repository specification: $REPO" 2>&1
	print_usage 2>&1
	exit 1
    fi
 
    if test -z "$PACKAGE"; then
	echo "no packagedir" 2>&1
	print_usage 2>&1
	exit 1
    fi

    return 0
}

function bzr_checkout_print_usage
{
    echo "	" bar branch LOCATION PACKAGEDIR
}

function do_checkout
{
    sudo -H -u lcopy $(lcopy_checkout "$VCS" "$REPO" "$BRANCH" "$MODULE")
}

function do_checkout_after
{
    sudo -H -u lcopy $(lcopy_checkout_after "$VCS" "$REPO" "$BRANCH" "$MODULE")
}

function make_specs
{
    sudo -H -u lcopy \
    lcopy-genspec --spec-type=subscription	\
        --package=$PACKAGE			\
        --branch=$BRANCH			\
        --repo=$REPO				\
        --module=$MODULE			\
        --vcs=$VCS				\
        --release=$RELEASE			\
        --output-dir=$SPECS_DIR			

    sudo -H -u lcopy \
    lcopy-genspec --spec-type=link		\
        --package=$PACKAGE			\
        --branch=$BRANCH			\
        --release=$RELEASE			\
        --output-dir=$SPECS_DIR
}

source liblcopy.sh
main "$@"

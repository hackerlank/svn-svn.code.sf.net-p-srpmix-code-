########################################################################
#
# liblcopy.sh: support shell functions for lcopy
#
# Copyright (C) 2007 Masatake YAMATO
#
# Author: Masatake YAMATO <yamato@redhat.com>
#
# program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
########################################################################

LCOPY_VERSION=@VERSION@


# Expected function for each vcs
#
# - *_p
# - *_make_checkout_cmdline
# - *_checkout
# - *_update
#
function arch_p
{
    test -d '{arch}'
}

function bzr_p
{
    test -d .bzr
}

function cvs_p
{
    test -d CVS
}

function darcs_p
{
    test -d _darcs
}

function git_p
{
    test -d .git
}

function hg_p
{
    test -d .hg
}

#
# See http://www.openembedded.org/wiki/GettingStarted
#
function mtn_p
{
    for m in *.mtn; do
	if test -f "${m}"; then
	    return 0
	fi
    done

    return 1
}

function mtn_lcopy_p
{
    test -d _MTN
}

function svn_p
{
    test -d .svn
}


function lcopy_checkout
{
    local vcs

    vcs=$1

    shift 1
    "${vcs}_checkout" "$@"
}

function lcopy_checkout_cmdline
{
    local vcs

    vcs=$1

    shift 1
    "${vcs}_make_checkout_cmdline" "$@"
    
}

function lcopy_package_hash
{
    echo ${1:0:1}
}

function lcopy_package_name
{
    echo ${1}
}

function lcopy_branch_name
{
    if test -z "$1"; then
	echo "trunk"
    elif test "$1" = "-"; then
	echo "$trunk"
    else
	echo "$1"
    fi
}

function lcopy_make_pb_name
{
    local package
    local branch

    package=$1
    branch=$2

    if test -z "$branch"; then
	echo "$package"
    elif test "$branch" = "-"; then
	echo "$package"
    else
	echo "${package}--${branch}"
    fi
}

function svn_make_checkout_cmdline
{

    local repo=$1
    local package=$2
    local branch=$3
    
    
    echo svn checkout "$repo" $(lcopy_make_pb_name "${package}" "${branch}")
}

function svn_checkout
{

    local repo=$1
    local dir=$2
    
    
    echo svn checkout "$repo" "$dir"
}

function bzr_make_checkout_cmdline
{

    local repo=$1
    local package=$2
    local branch=$3
    
    bzr_checkout "$repo" $(lcopy_make_pb_name "${package}" "${branch}")
}

function bzr_checkout
{
    local repo=$1
    local dir=$2

    echo bzr branch "$repo" "$dir"
}

function git_make_checkout_cmdline
{

    local repo=$1
    local package=$2
    local branch=$3
    
    echo git clone "$repo" $(lcopy_make_pb_name "${package}" "${branch}")
}

function git_checkout
{

    local repo=$1
    local dir=$2
    
    echo git clone "$repo" "$dir"
}

function hg_make_checkout_cmdline
{

    local repo=$1
    local package=$2
    local branch=$3
    
    echo hg clone "$repo" $(lcopy_make_pb_name "${package}" "${branch}")
}

function hg_checkout
{

    local repo=$1
    local dir=$2
    
    echo hg clone "$repo" "$dir"
}

function cvs_make_checkout_cmdline
{

    local repo=$1
    local package=$2
    local branch=$3
    local module=$4
    
    echo cvs -d${repo} checkout -P -d $(lcopy_make_pb_name "${package}" "${branch}") ${module} 
    
}

function cvs_checkout
{
    local repo=$1
    local dir=$2
    local module=$3

    echo cvs -d${repo} checkout -P -d ${dir} ${module} 
}

#
# Darcs
#
function darcs_update
{
    which darcs > /dev/null 2>> $LOG && darcs pull -a 
}

#
# Bazzar NG
#
function bzr_update
{
    which bzr > /dev/null 2>> $LOG && bzr update
}

#
# Mercurial
#
function hg_update
{
    which hg > /dev/null 2>> $LOG && hg update
} 

#
# Arch
#
function arch_update
{
    if which baz >/dev/null 2>/dev/null; then
	baz replay
    elif which tla > /dev/null 2>/dev/null; then
	tla replay
    else
	echo "both tla and baz are not found" 2>$LOG 1>&2 
	return 1
    fi
}

#
# Subversion
#
function svn_update
{
    which svn > /dev/null 2>> $LOG && svn update
}

#
# git
#
function git_update
{
    which git > /dev/null 2>> $LOG && git pull
}

#
# CVS
#
function cvs_update
{
    which cvs > /dev/null 2>> $LOG && cvs update -d
}

#
# Monotone
#
# See http://www.openembedded.org/wiki/GettingStarted
#

function mtn_update
{
    r=
    mtn_db=

    
    if ! which mtn > /dev/null 2>> $LOG; then
	return 1
    fi

    for m in *.mtn; do
	if test -f "${m}"; then
	    mtn_db="`pwd`/${m}"
	fi
    done

    if test x = "x${mtn_db}"; then
	return 1
    fi

    mtn --db="${mtn_db}" pull
    r=$?

    if test $r != 0; then
	return $r
    fi

    for d in *; do
	if test -d "${d}"; then
	    (refresh "${d}")
	fi
    done

    return 0
}

function mtn_lcopy_update
{
    which mtn > /dev/null 2>> $LOG && mtn update
}



function is_member
{
    local target=$1
    shift 1

    for v in "$@"; do
	if test "$target" = "$v"; then
	    return 0
	fi
    done
    
    return 1
}

########################################################################
#
function es_echo_n
{
    printf "%s" "$*"
}
#
########################################################################

########################################################################
#
# es_time
#
function es_time
{
    TIMEFORMAT=$'(time :real %R :user %U :sys %S)' 
    time $@
    return $?
}
#
########################################################################


########################################################################
#
# es_print is taken from es-lang-sh-print. 
#
function es_print
{
    es_print_value=no


    es_echo_n "("

    while [ $# -gt 0 ]; do
	case "$1" in 
	    --*=*)
                if test ${es_print_value} = yes; then
		    es_echo_n ") "
		fi

                es_echo_n "`echo $1 | sed -e 's/^--\([^=]*\)=\(.*\)$/:\1 \2/'` "
		es_print_value=no

		shift
		;;
	    --*)
		if test ${es_print_value} = yes; then
		    es_echo_n ") "
		    es_print_value=no
		fi
		
		es_echo_n "`echo $1 | sed -e 's/^--/:/'` "
		es_print_value=yes
		es_echo_n "("

		shift
		;;
	    -*=*)
                if test ${es_print_value} = yes; then
		    es_echo_n ") "
		fi

                es_echo_n "`echo $1 | sed -e 's/^-\([^=]*\)=\(.*\)$/:\1 \2/'` "
		es_print_value=no

		shift
		;;
	    -*)
		if test ${es_print_value} = yes; then
		    es_echo_n ") "
		    es_print_value=no
		fi
		
		es_echo_n "`echo $1 | sed -e 's/^-/:/'` "
		es_print_value=yes
		es_echo_n "("

		shift
		;;
	    *)
		es_echo_n "$1 "
		shift
		;;
	    esac
    done
    
    if test ${es_print_value} = yes; then
	    es_echo_n ")"
	    es_print_value=no
    fi
    echo ")"
}
#
########################################################################

: libcopy.sh ends here

#!/bin/sh
#
# set -x
#
########################################################################
#
# lcopy-genspec: generate spec file for lcopy subscription and srpmix link
#
# Copyright (C) 2008 Masatake YAMATO
#
# Author: Masatake YAMATO <yamato@redhat.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
########################################################################
LCOPY_VERSION=0.0.9
SUPPORTED_VCSs="svn git"
PACKAGE=
BRANCH=
REPO=
VCS=
CMDLINE=
SPEC_TYPE=
RELEASE=0
OUTPUT_DIR=.



source libsrpmix.sh



function print_usage
{
    echo "Usage: "
    echo "lcopy-genspec --spec-type=subscription"
    echo "              --package=PACKAGE [--branch=BRANCH]"
    echo "              --repo=REPO"
    echo "              --vcs=VCS"
    echo "              [--release=RELEASE]"
    echo "              [--output-dir=OUTPUT_DIR]"
    echo
    echo "lcopy-genspec --spec-type=link"
    echo "              --package=PACKAGE [--branch=BRANCH]"
    echo "              [--release=RELEASE]"
    echo "              [--output-dir=OUTPUT_DIR]"
    echo ""
    echo "lcopy-genspec --help"
    echo "Supported VCS: $SUPPORTED_VCSs"
}

function abort
{
    echo "*** ABORT..." "$@" 1>&2
    exit 1
}

function is_member
{
    local target=$1
    shift 1

    for v in "$@"; do
	if test "$target" = "$v"; then
	    return 0
	fi
    done
    
    return 1
}

function parse_arguments
{
    while [ $# -gt 0 ]; do
	case "$1" in
	    --help|-h)
		print_usage
		exit 0
		;;
	    --spec-type=*)
                 SPEC_TYPE=${1/--spec-type=/}
		 shift 1
		 ;;
	    --package=*)
	         PACKAGE=${1/--package=/}
		 shift 1
		 ;;
	    --branch=*)
	         BRANCH=${1/--branch=/}
		 shift 1
		 ;;
	    --repo=*)
	         REPO=${1/--repo=/}
		 shift 1
		 ;;
	    --vcs=*)
	         VCS=${1/--vcs=/}
		 shift 1
		 ;;
	    --release=*)
	         RELEASE=${1/--release=/}
		 shift 1
		 ;;
	    --output-dir=*)
	         OUTPUT_DIR=${1/--output-dir=/}
		 shift 1
		 ;;
	    *)
	       break
	       ;;
	esac
    done

    if test $# -gt 1; then
	echo "too many arguments" 1>&2
	print_usage 1>&2
	abort
    fi 

    if test -z "$SPEC_TYPE"; then
	echo "Needs spec type" 1>&2
	print_usage 1>&2
	abort
    fi
}

function verify_arguments
{
    case "$SPEC_TYPE" in
	link|subscription)
	    eval ${SPEC_TYPE}_verify_arguments
	    ;;
	*)
	    echo "Unknown spec type: $SPEC_TYPE"
	    print_usage 1>&2
	    abort
	    ;;
    esac
}

function vcs_to_vcs_pkg
{
    eval ${1}_to_pkg
}

function generate
{
    eval "$SPEC_TYPE"_generate
}

function make_pb_name
{
    local package
    local branch

    package=$1
    branch=$2

    if test -z "$branch"; then
	echo "$package"
    else
	echo "${package}--${branch}"
    fi
}

function make_checkout_cmdline
{
    local vcs

    vcs=$1

    shift 1
    eval "${vcs}_make_checkout_cmdline" "$@"
    
}


#
# Subscription
#
function subscription_generate
{
    local vcs_pkg
    local cmdline
    local date

    vcs_pkg="$(vcs_to_vcs_pkg $VCS)"
    cmdline="$(make_checkout_cmdline $VCS $REPO $PACKAGE $BRANCH)"
    date=$(date "+%a %b %e %Y")

    cat >"${OUTPUT_DIR}/$(make_pb_name $PACKAGE $BRANCH)-lcopy-subscription.spec" <<EOF
%define lcopy_x_pkg $PACKAGE
%define lcopy_x_branch $BRANCH
%define lcopy_x_vcs $VCS
%define lcopy_x_vcs_pkg $vcs_pkg
%define lcopy_x_repo $REPO

%define lcopy_branch_suffix %{?lcopy_x_branch:--%{lcopy_x_branch}}
%define lcopy_branch_doc    %{?lcopy_x_branch:(branch %{lcopy_x_branch}) }

%define lcopy_x_cmdline $cmdline

%define lcopy_version $LCOPY_VERSION
%define lcopy_release $RELEASE
%define lcopy_rootdir /var/lib/lcopy
%define lcopy_srcdir %{lcopy_rootdir}/sources



Summary: Subscribing %{lcopy_x_pkg}%{lcopy_branch_doc} source code via %{lcopy_x_vcs}
Name: %{lcopy_x_pkg}%{lcopy_branch_suffix}-lcopy-subscription
Version: %{lcopy_version}
Release: %{lcopy_release}
License: GPL
Group: Development/Tools
URL: http://srpmix.org
Requires: %{lcopy_x_vcs_pkg}
BuildRoot: %{_tmppath}/%{name}-%{version}-%{release}-root
Buildarch: noarch
Autoreq: 0


%description
Subscribing  source code via %{lcopy_x_vcs} from
%{lcopy_x_repo}.

%prep

%build

%install
mkdir -p \$RPM_BUILD_ROOT
%clean
rm -rf \$RPM_BUILD_ROOT

%post
cd %{lcopy_srcdir}
test -d %{lcopy_x_pkg}%{lcopy_branch_suffix} || sudo -H -u lcopy %{lcopy_x_cmdline}

%postun
rm -rf %{lcopy_srcdir}/%{lcopy_x_pkg}%{lcopy_branch_suffix}

%files
%defattr(-,root,root,-)
%doc


%changelog
* $date lcopy genspec <yamato@redhat.com> - lcopy-subscription
- Built automatically.

 
EOF
}

function subscription_verify_arguments
{
    if test -z "$PACKAGE"; then
	echo "Needs package name" 1>&2
	print_usage 1>&2
	abort
    fi

    if test -z "$VCS"; then
	echo "Needs vcs name" 1>&2
	print_usage 1>&2
	abort
    fi

    if ! is_member "$VCS" $SUPPORTED_VCSs; then
	echo "Unsupported vcs: $VCS" 1>&2
	print_usage 1>&2
	abort
    fi

    if test -z "$REPO"; then
	echo "Needs repo" 1>&2
	print_usage 1>&2
	abort
    fi
}


#
# Link
#
function link_generate
{
    local vcs_pkg
    local cmdline

    local date
    local rootdir
    local lcopy_rootdir
    local sourcesdir
    local branch_suffix

    date=$(date "+%a %b %e %Y")


    rootdir=${SRPMIX_ROOT_DIR}
    
    lcopy_rootdir=${rootdir}/lcopy
    sourcesdir=${rootdir}/sources

    if test -n "${BRANCH}"; then
	branch_suffix="--${BRANCH}"
    else
	branch_suffix=""
    fi

    cat >"${OUTPUT_DIR}/$(make_pb_name $PACKAGE $BRANCH)-lcopy-link.spec" <<EOF
Summary: A link from ${PACKAGE} srpmix sources directory to $(make_pb_name $PACKAGE $BRANCH) locpy directory
Name: $(make_pb_name $PACKAGE $BRANCH)-lcopy-link
Version: $LCOPY_VERSION
Release: $RELEASE
License: GPL
Group: Development/Tools
URL: http://srpmix.org
BuildRoot: %{_tmppath}/%{name}-%{version}-%{release}-root
Buildarch: noarch
Autoreq: 0


%description
A link from ${PACKAGE} srpmix sources directory to 
$(make_pb_name $PACKAGE $BRANCH) locpy directory.

%prep
builddistdir=%{_builddir}/%{name}
rm -rf \$builddistdir

%build
linkto=../../../lcopy/sources/$(make_pb_name $PACKAGE $BRANCH)
builddistdir=%{_builddir}/%{name}$sourcesdir/$(srpmix_srchash "$PACKAGE")/$PACKAGE
mkdir -p \${builddistdir}

if test -n "$BRANCH"; then
   ln -sf \$linkto \${builddistdir}/\%"$BRANCH"
else
   ln -sf \$linkto \${builddistdir}/\%CURRENT
fi

%install
builddistdir=%{_builddir}/%{name}$sourcesdir/$(srpmix_srchash "$PACKAGE")/$PACKAGE
intalldir=$sourcesdir/$(srpmix_srchash "$PACKAGE")/$PACKAGE

rm -rf \$RPM_BUILD_ROOT
mkdir -p \$RPM_BUILD_ROOT/\${intalldir}

rsync -va \$builddistdir/* \$RPM_BUILD_ROOT/\${intalldir}

%clean
rm -rf \$RPM_BUILD_ROOT

%files
%defattr(-,root,root,-)
/

%changelog
* $date lcopy genspec <yamato@redhat.com> - lcopy-link
- Built automatically.

 
EOF
}

function link_verify_arguments
{
    if test -z "$PACKAGE"; then
	echo "Needs package name" 1>&2
	print_usage 1>&2
	abort
    fi
}

#
# Subversion
#
function svn_make_checkout_cmdline
{

    local repo=$1
    local package=$2
    local branch=$3
    
    
    echo svn checkout "$repo" $(make_pb_name "${package}" "${branch}")
}
function svn_to_pkg
{
    echo subversion
}

#
# Git
#
function git_make_checkout_cmdline
{

    local repo=$1
    local package=$2
    local branch=$3
    
    echo git clone "$repo" $(make_pb_name "${package}" "${branch}")
}
function git_to_pkg
{
    echo git
}

function main
{
    parse_arguments "$@"
    verify_arguments
    generate
}

main "$@"
